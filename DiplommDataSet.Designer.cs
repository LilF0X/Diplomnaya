//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Diplomnaya {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DiplommDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DiplommDataSet : global::System.Data.DataSet {
        
        private ДомDataTable tableДом;
        
        private Населённый_пунктDataTable tableНаселённый_пункт;
        
        private ПользовательDataTable tableПользователь;
        
        private Проекты_домовDataTable tableПроекты_домов;
        
        private Стоимость_постройки_домаDataTable tableСтоимость_постройки_дома;
        
        private УчастокDataTable tableУчасток;
        
        private global::System.Data.DataRelation relationFK_Дом_Пользователь;
        
        private global::System.Data.DataRelation relationFK_Населённый_пункт_Пользователь;
        
        private global::System.Data.DataRelation relationFK_Проекты_домов_Стоимость_постройки_дома;
        
        private global::System.Data.DataRelation relationFK_Стоимость_постройки_дома_Пользователь;
        
        private global::System.Data.DataRelation relationFK_Участок_Пользователь;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public DiplommDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected DiplommDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Дом"] != null)) {
                    base.Tables.Add(new ДомDataTable(ds.Tables["Дом"]));
                }
                if ((ds.Tables["Населённый пункт"] != null)) {
                    base.Tables.Add(new Населённый_пунктDataTable(ds.Tables["Населённый пункт"]));
                }
                if ((ds.Tables["Пользователь"] != null)) {
                    base.Tables.Add(new ПользовательDataTable(ds.Tables["Пользователь"]));
                }
                if ((ds.Tables["Проекты домов"] != null)) {
                    base.Tables.Add(new Проекты_домовDataTable(ds.Tables["Проекты домов"]));
                }
                if ((ds.Tables["Стоимость постройки дома"] != null)) {
                    base.Tables.Add(new Стоимость_постройки_домаDataTable(ds.Tables["Стоимость постройки дома"]));
                }
                if ((ds.Tables["Участок"] != null)) {
                    base.Tables.Add(new УчастокDataTable(ds.Tables["Участок"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ДомDataTable Дом {
            get {
                return this.tableДом;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Населённый_пунктDataTable Населённый_пункт {
            get {
                return this.tableНаселённый_пункт;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ПользовательDataTable Пользователь {
            get {
                return this.tableПользователь;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Проекты_домовDataTable Проекты_домов {
            get {
                return this.tableПроекты_домов;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Стоимость_постройки_домаDataTable Стоимость_постройки_дома {
            get {
                return this.tableСтоимость_постройки_дома;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public УчастокDataTable Участок {
            get {
                return this.tableУчасток;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            DiplommDataSet cln = ((DiplommDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Дом"] != null)) {
                    base.Tables.Add(new ДомDataTable(ds.Tables["Дом"]));
                }
                if ((ds.Tables["Населённый пункт"] != null)) {
                    base.Tables.Add(new Населённый_пунктDataTable(ds.Tables["Населённый пункт"]));
                }
                if ((ds.Tables["Пользователь"] != null)) {
                    base.Tables.Add(new ПользовательDataTable(ds.Tables["Пользователь"]));
                }
                if ((ds.Tables["Проекты домов"] != null)) {
                    base.Tables.Add(new Проекты_домовDataTable(ds.Tables["Проекты домов"]));
                }
                if ((ds.Tables["Стоимость постройки дома"] != null)) {
                    base.Tables.Add(new Стоимость_постройки_домаDataTable(ds.Tables["Стоимость постройки дома"]));
                }
                if ((ds.Tables["Участок"] != null)) {
                    base.Tables.Add(new УчастокDataTable(ds.Tables["Участок"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tableДом = ((ДомDataTable)(base.Tables["Дом"]));
            if ((initTable == true)) {
                if ((this.tableДом != null)) {
                    this.tableДом.InitVars();
                }
            }
            this.tableНаселённый_пункт = ((Населённый_пунктDataTable)(base.Tables["Населённый пункт"]));
            if ((initTable == true)) {
                if ((this.tableНаселённый_пункт != null)) {
                    this.tableНаселённый_пункт.InitVars();
                }
            }
            this.tableПользователь = ((ПользовательDataTable)(base.Tables["Пользователь"]));
            if ((initTable == true)) {
                if ((this.tableПользователь != null)) {
                    this.tableПользователь.InitVars();
                }
            }
            this.tableПроекты_домов = ((Проекты_домовDataTable)(base.Tables["Проекты домов"]));
            if ((initTable == true)) {
                if ((this.tableПроекты_домов != null)) {
                    this.tableПроекты_домов.InitVars();
                }
            }
            this.tableСтоимость_постройки_дома = ((Стоимость_постройки_домаDataTable)(base.Tables["Стоимость постройки дома"]));
            if ((initTable == true)) {
                if ((this.tableСтоимость_постройки_дома != null)) {
                    this.tableСтоимость_постройки_дома.InitVars();
                }
            }
            this.tableУчасток = ((УчастокDataTable)(base.Tables["Участок"]));
            if ((initTable == true)) {
                if ((this.tableУчасток != null)) {
                    this.tableУчасток.InitVars();
                }
            }
            this.relationFK_Дом_Пользователь = this.Relations["FK_Дом_Пользователь"];
            this.relationFK_Населённый_пункт_Пользователь = this.Relations["FK_Населённый пункт_Пользователь"];
            this.relationFK_Проекты_домов_Стоимость_постройки_дома = this.Relations["FK_Проекты домов_Стоимость постройки дома"];
            this.relationFK_Стоимость_постройки_дома_Пользователь = this.Relations["FK_Стоимость постройки дома_Пользователь"];
            this.relationFK_Участок_Пользователь = this.Relations["FK_Участок_Пользователь"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitClass() {
            this.DataSetName = "DiplommDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DiplommDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableДом = new ДомDataTable();
            base.Tables.Add(this.tableДом);
            this.tableНаселённый_пункт = new Населённый_пунктDataTable();
            base.Tables.Add(this.tableНаселённый_пункт);
            this.tableПользователь = new ПользовательDataTable();
            base.Tables.Add(this.tableПользователь);
            this.tableПроекты_домов = new Проекты_домовDataTable();
            base.Tables.Add(this.tableПроекты_домов);
            this.tableСтоимость_постройки_дома = new Стоимость_постройки_домаDataTable();
            base.Tables.Add(this.tableСтоимость_постройки_дома);
            this.tableУчасток = new УчастокDataTable();
            base.Tables.Add(this.tableУчасток);
            this.relationFK_Дом_Пользователь = new global::System.Data.DataRelation("FK_Дом_Пользователь", new global::System.Data.DataColumn[] {
                        this.tableПользователь.idColumn}, new global::System.Data.DataColumn[] {
                        this.tableДом.idColumn}, false);
            this.Relations.Add(this.relationFK_Дом_Пользователь);
            this.relationFK_Населённый_пункт_Пользователь = new global::System.Data.DataRelation("FK_Населённый пункт_Пользователь", new global::System.Data.DataColumn[] {
                        this.tableПользователь.idColumn}, new global::System.Data.DataColumn[] {
                        this.tableНаселённый_пункт.idColumn}, false);
            this.Relations.Add(this.relationFK_Населённый_пункт_Пользователь);
            this.relationFK_Проекты_домов_Стоимость_постройки_дома = new global::System.Data.DataRelation("FK_Проекты домов_Стоимость постройки дома", new global::System.Data.DataColumn[] {
                        this.tableСтоимость_постройки_дома.Номер_проекта_домаColumn}, new global::System.Data.DataColumn[] {
                        this.tableПроекты_домов.Номер_проекта_домаColumn}, false);
            this.Relations.Add(this.relationFK_Проекты_домов_Стоимость_постройки_дома);
            this.relationFK_Стоимость_постройки_дома_Пользователь = new global::System.Data.DataRelation("FK_Стоимость постройки дома_Пользователь", new global::System.Data.DataColumn[] {
                        this.tableПользователь.idColumn}, new global::System.Data.DataColumn[] {
                        this.tableСтоимость_постройки_дома.idColumn}, false);
            this.Relations.Add(this.relationFK_Стоимость_постройки_дома_Пользователь);
            this.relationFK_Участок_Пользователь = new global::System.Data.DataRelation("FK_Участок_Пользователь", new global::System.Data.DataColumn[] {
                        this.tableПользователь.idColumn}, new global::System.Data.DataColumn[] {
                        this.tableУчасток.idColumn}, false);
            this.Relations.Add(this.relationFK_Участок_Пользователь);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private bool ShouldSerializeДом() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private bool ShouldSerializeНаселённый_пункт() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private bool ShouldSerializeПользователь() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private bool ShouldSerializeПроекты_домов() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private bool ShouldSerializeСтоимость_постройки_дома() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private bool ShouldSerializeУчасток() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DiplommDataSet ds = new DiplommDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public delegate void ДомRowChangeEventHandler(object sender, ДомRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public delegate void Населённый_пунктRowChangeEventHandler(object sender, Населённый_пунктRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public delegate void ПользовательRowChangeEventHandler(object sender, ПользовательRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public delegate void Проекты_домовRowChangeEventHandler(object sender, Проекты_домовRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public delegate void Стоимость_постройки_домаRowChangeEventHandler(object sender, Стоимость_постройки_домаRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public delegate void УчастокRowChangeEventHandler(object sender, УчастокRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ДомDataTable : global::System.Data.TypedTableBase<ДомRow> {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnПроект_дома;
            
            private global::System.Data.DataColumn columnПлощадь_дома;
            
            private global::System.Data.DataColumn columnКоличество_этажей;
            
            private global::System.Data.DataColumn columnАдрес_дома;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ДомDataTable() {
                this.TableName = "Дом";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal ДомDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected ДомDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Проект_домаColumn {
                get {
                    return this.columnПроект_дома;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Площадь_домаColumn {
                get {
                    return this.columnПлощадь_дома;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Количество_этажейColumn {
                get {
                    return this.columnКоличество_этажей;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Адрес_домаColumn {
                get {
                    return this.columnАдрес_дома;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ДомRow this[int index] {
                get {
                    return ((ДомRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event ДомRowChangeEventHandler ДомRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event ДомRowChangeEventHandler ДомRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event ДомRowChangeEventHandler ДомRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event ДомRowChangeEventHandler ДомRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void AddДомRow(ДомRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ДомRow AddДомRow(ПользовательRow parentПользовательRowByFK_Дом_Пользователь, int Проект_дома, string Площадь_дома, int Количество_этажей, string Адрес_дома) {
                ДомRow rowДомRow = ((ДомRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Проект_дома,
                        Площадь_дома,
                        Количество_этажей,
                        Адрес_дома};
                if ((parentПользовательRowByFK_Дом_Пользователь != null)) {
                    columnValuesArray[0] = parentПользовательRowByFK_Дом_Пользователь[0];
                }
                rowДомRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowДомRow);
                return rowДомRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ДомRow FindByid(int id) {
                return ((ДомRow)(this.Rows.Find(new object[] {
                            id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ДомDataTable cln = ((ДомDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ДомDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnПроект_дома = base.Columns["Проект дома"];
                this.columnПлощадь_дома = base.Columns["Площадь дома"];
                this.columnКоличество_этажей = base.Columns["Количество этажей"];
                this.columnАдрес_дома = base.Columns["Адрес дома"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnПроект_дома = new global::System.Data.DataColumn("Проект дома", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnПроект_дома);
                this.columnПлощадь_дома = new global::System.Data.DataColumn("Площадь дома", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnПлощадь_дома);
                this.columnКоличество_этажей = new global::System.Data.DataColumn("Количество этажей", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnКоличество_этажей);
                this.columnАдрес_дома = new global::System.Data.DataColumn("Адрес дома", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnАдрес_дома);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnid}, true));
                this.columnid.AllowDBNull = false;
                this.columnid.Unique = true;
                this.columnПроект_дома.AllowDBNull = false;
                this.columnПлощадь_дома.AllowDBNull = false;
                this.columnПлощадь_дома.MaxLength = 50;
                this.columnКоличество_этажей.AllowDBNull = false;
                this.columnАдрес_дома.AllowDBNull = false;
                this.columnАдрес_дома.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ДомRow NewДомRow() {
                return ((ДомRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ДомRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ДомRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ДомRowChanged != null)) {
                    this.ДомRowChanged(this, new ДомRowChangeEvent(((ДомRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ДомRowChanging != null)) {
                    this.ДомRowChanging(this, new ДомRowChangeEvent(((ДомRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ДомRowDeleted != null)) {
                    this.ДомRowDeleted(this, new ДомRowChangeEvent(((ДомRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ДомRowDeleting != null)) {
                    this.ДомRowDeleting(this, new ДомRowChangeEvent(((ДомRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void RemoveДомRow(ДомRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DiplommDataSet ds = new DiplommDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ДомDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Населённый_пунктDataTable : global::System.Data.TypedTableBase<Населённый_пунктRow> {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnНазвание_населенного_пункта;
            
            private global::System.Data.DataColumn columnКомуникации_в_населенном_пункте;
            
            private global::System.Data.DataColumn columnКоличество__выкупленнных_участков;
            
            private global::System.Data.DataColumn columnКоличество_участков_в_продаже;
            
            private global::System.Data.DataColumn columnКоличество_строющихся_домов;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public Населённый_пунктDataTable() {
                this.TableName = "Населённый пункт";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal Населённый_пунктDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected Населённый_пунктDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Название_населенного_пунктаColumn {
                get {
                    return this.columnНазвание_населенного_пункта;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Комуникации_в_населенном_пунктеColumn {
                get {
                    return this.columnКомуникации_в_населенном_пункте;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Количество__выкупленнных_участковColumn {
                get {
                    return this.columnКоличество__выкупленнных_участков;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Количество_участков_в_продажеColumn {
                get {
                    return this.columnКоличество_участков_в_продаже;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Количество_строющихся_домовColumn {
                get {
                    return this.columnКоличество_строющихся_домов;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public Населённый_пунктRow this[int index] {
                get {
                    return ((Населённый_пунктRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event Населённый_пунктRowChangeEventHandler Населённый_пунктRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event Населённый_пунктRowChangeEventHandler Населённый_пунктRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event Населённый_пунктRowChangeEventHandler Населённый_пунктRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event Населённый_пунктRowChangeEventHandler Населённый_пунктRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void AddНаселённый_пунктRow(Населённый_пунктRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public Населённый_пунктRow AddНаселённый_пунктRow(ПользовательRow parentПользовательRowByFK_Населённый_пункт_Пользователь, string Название_населенного_пункта, string Комуникации_в_населенном_пункте, int Количество__выкупленнных_участков, int Количество_участков_в_продаже, int Количество_строющихся_домов) {
                Населённый_пунктRow rowНаселённый_пунктRow = ((Населённый_пунктRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Название_населенного_пункта,
                        Комуникации_в_населенном_пункте,
                        Количество__выкупленнных_участков,
                        Количество_участков_в_продаже,
                        Количество_строющихся_домов};
                if ((parentПользовательRowByFK_Населённый_пункт_Пользователь != null)) {
                    columnValuesArray[0] = parentПользовательRowByFK_Населённый_пункт_Пользователь[0];
                }
                rowНаселённый_пунктRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowНаселённый_пунктRow);
                return rowНаселённый_пунктRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public Населённый_пунктRow FindByid(int id) {
                return ((Населённый_пунктRow)(this.Rows.Find(new object[] {
                            id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                Населённый_пунктDataTable cln = ((Населённый_пунктDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Населённый_пунктDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnНазвание_населенного_пункта = base.Columns["Название населенного пункта"];
                this.columnКомуникации_в_населенном_пункте = base.Columns["Комуникации в населенном пункте"];
                this.columnКоличество__выкупленнных_участков = base.Columns["Количество  выкупленнных участков"];
                this.columnКоличество_участков_в_продаже = base.Columns["Количество участков в продаже"];
                this.columnКоличество_строющихся_домов = base.Columns["Количество строющихся домов"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnНазвание_населенного_пункта = new global::System.Data.DataColumn("Название населенного пункта", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnНазвание_населенного_пункта);
                this.columnКомуникации_в_населенном_пункте = new global::System.Data.DataColumn("Комуникации в населенном пункте", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnКомуникации_в_населенном_пункте);
                this.columnКоличество__выкупленнных_участков = new global::System.Data.DataColumn("Количество  выкупленнных участков", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnКоличество__выкупленнных_участков);
                this.columnКоличество_участков_в_продаже = new global::System.Data.DataColumn("Количество участков в продаже", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnКоличество_участков_в_продаже);
                this.columnКоличество_строющихся_домов = new global::System.Data.DataColumn("Количество строющихся домов", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnКоличество_строющихся_домов);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnid}, true));
                this.columnid.AllowDBNull = false;
                this.columnid.Unique = true;
                this.columnНазвание_населенного_пункта.AllowDBNull = false;
                this.columnНазвание_населенного_пункта.MaxLength = 50;
                this.columnКомуникации_в_населенном_пункте.AllowDBNull = false;
                this.columnКомуникации_в_населенном_пункте.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public Населённый_пунктRow NewНаселённый_пунктRow() {
                return ((Населённый_пунктRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Населённый_пунктRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(Населённый_пунктRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Населённый_пунктRowChanged != null)) {
                    this.Населённый_пунктRowChanged(this, new Населённый_пунктRowChangeEvent(((Населённый_пунктRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Населённый_пунктRowChanging != null)) {
                    this.Населённый_пунктRowChanging(this, new Населённый_пунктRowChangeEvent(((Населённый_пунктRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Населённый_пунктRowDeleted != null)) {
                    this.Населённый_пунктRowDeleted(this, new Населённый_пунктRowChangeEvent(((Населённый_пунктRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Населённый_пунктRowDeleting != null)) {
                    this.Населённый_пунктRowDeleting(this, new Населённый_пунктRowChangeEvent(((Населённый_пунктRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void RemoveНаселённый_пунктRow(Населённый_пунктRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DiplommDataSet ds = new DiplommDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Населённый_пунктDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ПользовательDataTable : global::System.Data.TypedTableBase<ПользовательRow> {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnЛогин;
            
            private global::System.Data.DataColumn columnПароль;
            
            private global::System.Data.DataColumn columnДоступ;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ПользовательDataTable() {
                this.TableName = "Пользователь";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal ПользовательDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected ПользовательDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ЛогинColumn {
                get {
                    return this.columnЛогин;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ПарольColumn {
                get {
                    return this.columnПароль;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ДоступColumn {
                get {
                    return this.columnДоступ;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ПользовательRow this[int index] {
                get {
                    return ((ПользовательRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event ПользовательRowChangeEventHandler ПользовательRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event ПользовательRowChangeEventHandler ПользовательRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event ПользовательRowChangeEventHandler ПользовательRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event ПользовательRowChangeEventHandler ПользовательRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void AddПользовательRow(ПользовательRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ПользовательRow AddПользовательRow(string Логин, string Пароль, int Доступ) {
                ПользовательRow rowПользовательRow = ((ПользовательRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Логин,
                        Пароль,
                        Доступ};
                rowПользовательRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowПользовательRow);
                return rowПользовательRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ПользовательRow FindByid(int id) {
                return ((ПользовательRow)(this.Rows.Find(new object[] {
                            id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ПользовательDataTable cln = ((ПользовательDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ПользовательDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnЛогин = base.Columns["Логин"];
                this.columnПароль = base.Columns["Пароль"];
                this.columnДоступ = base.Columns["Доступ"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnЛогин = new global::System.Data.DataColumn("Логин", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnЛогин);
                this.columnПароль = new global::System.Data.DataColumn("Пароль", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnПароль);
                this.columnДоступ = new global::System.Data.DataColumn("Доступ", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnДоступ);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnid}, true));
                this.columnid.AutoIncrement = true;
                this.columnid.AutoIncrementSeed = -1;
                this.columnid.AutoIncrementStep = -1;
                this.columnid.AllowDBNull = false;
                this.columnid.ReadOnly = true;
                this.columnid.Unique = true;
                this.columnЛогин.AllowDBNull = false;
                this.columnЛогин.MaxLength = 50;
                this.columnПароль.AllowDBNull = false;
                this.columnПароль.MaxLength = 50;
                this.columnДоступ.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ПользовательRow NewПользовательRow() {
                return ((ПользовательRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ПользовательRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ПользовательRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ПользовательRowChanged != null)) {
                    this.ПользовательRowChanged(this, new ПользовательRowChangeEvent(((ПользовательRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ПользовательRowChanging != null)) {
                    this.ПользовательRowChanging(this, new ПользовательRowChangeEvent(((ПользовательRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ПользовательRowDeleted != null)) {
                    this.ПользовательRowDeleted(this, new ПользовательRowChangeEvent(((ПользовательRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ПользовательRowDeleting != null)) {
                    this.ПользовательRowDeleting(this, new ПользовательRowChangeEvent(((ПользовательRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void RemoveПользовательRow(ПользовательRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DiplommDataSet ds = new DiplommDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ПользовательDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Проекты_домовDataTable : global::System.Data.TypedTableBase<Проекты_домовRow> {
            
            private global::System.Data.DataColumn columnНомер_проекта_дома;
            
            private global::System.Data.DataColumn columnСтоимость_материалов;
            
            private global::System.Data.DataColumn columnСтоимость_строительных_работ;
            
            private global::System.Data.DataColumn columnРазмер_участка;
            
            private global::System.Data.DataColumn columnПлощадь_дома;
            
            private global::System.Data.DataColumn columnКоличество_этажей;
            
            private global::System.Data.DataColumn columnТип_фундамента;
            
            private global::System.Data.DataColumn columnМатериалы_стен;
            
            private global::System.Data.DataColumn columnТолщина_стен;
            
            private global::System.Data.DataColumn columnПерегородка_мансардного_этажа;
            
            private global::System.Data.DataColumn columnМатериалы_полов;
            
            private global::System.Data.DataColumn columnМатериалы_потолков;
            
            private global::System.Data.DataColumn columnОконные_рамы;
            
            private global::System.Data.DataColumn columnТипы_дверей;
            
            private global::System.Data.DataColumn columnМатериалы_кровли;
            
            private global::System.Data.DataColumn columnВид_отопления;
            
            private global::System.Data.DataColumn columnТип_канализации;
            
            private global::System.Data.DataColumn columnКоличество_комнат;
            
            private global::System.Data.DataColumn columnПрочность_и_долговечность;
            
            private global::System.Data.DataColumn columnЭнергетическая_эффективность;
            
            private global::System.Data.DataColumn columnСанузел;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public Проекты_домовDataTable() {
                this.TableName = "Проекты домов";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal Проекты_домовDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected Проекты_домовDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Номер_проекта_домаColumn {
                get {
                    return this.columnНомер_проекта_дома;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Стоимость_материаловColumn {
                get {
                    return this.columnСтоимость_материалов;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Стоимость_строительных_работColumn {
                get {
                    return this.columnСтоимость_строительных_работ;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Размер_участкаColumn {
                get {
                    return this.columnРазмер_участка;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Площадь_домаColumn {
                get {
                    return this.columnПлощадь_дома;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Количество_этажейColumn {
                get {
                    return this.columnКоличество_этажей;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Тип_фундаментаColumn {
                get {
                    return this.columnТип_фундамента;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Материалы_стенColumn {
                get {
                    return this.columnМатериалы_стен;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Толщина_стенColumn {
                get {
                    return this.columnТолщина_стен;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Перегородка_мансардного_этажаColumn {
                get {
                    return this.columnПерегородка_мансардного_этажа;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Материалы_половColumn {
                get {
                    return this.columnМатериалы_полов;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Материалы_потолковColumn {
                get {
                    return this.columnМатериалы_потолков;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Оконные_рамыColumn {
                get {
                    return this.columnОконные_рамы;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Типы_дверейColumn {
                get {
                    return this.columnТипы_дверей;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Материалы_кровлиColumn {
                get {
                    return this.columnМатериалы_кровли;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Вид_отопленияColumn {
                get {
                    return this.columnВид_отопления;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Тип_канализацииColumn {
                get {
                    return this.columnТип_канализации;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Количество_комнатColumn {
                get {
                    return this.columnКоличество_комнат;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Прочность_и_долговечностьColumn {
                get {
                    return this.columnПрочность_и_долговечность;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Энергетическая_эффективностьColumn {
                get {
                    return this.columnЭнергетическая_эффективность;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn СанузелColumn {
                get {
                    return this.columnСанузел;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public Проекты_домовRow this[int index] {
                get {
                    return ((Проекты_домовRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event Проекты_домовRowChangeEventHandler Проекты_домовRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event Проекты_домовRowChangeEventHandler Проекты_домовRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event Проекты_домовRowChangeEventHandler Проекты_домовRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event Проекты_домовRowChangeEventHandler Проекты_домовRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void AddПроекты_домовRow(Проекты_домовRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public Проекты_домовRow AddПроекты_домовRow(
                        Стоимость_постройки_домаRow parentСтоимость_постройки_домаRowByFK_Проекты_домов_Стоимость_постройки_дома, 
                        decimal Стоимость_материалов, 
                        decimal Стоимость_строительных_работ, 
                        string Размер_участка, 
                        int Площадь_дома, 
                        int Количество_этажей, 
                        string Тип_фундамента, 
                        string Материалы_стен, 
                        string Толщина_стен, 
                        string Перегородка_мансардного_этажа, 
                        string Материалы_полов, 
                        string Материалы_потолков, 
                        string Оконные_рамы, 
                        string Типы_дверей, 
                        string Материалы_кровли, 
                        string Вид_отопления, 
                        string Тип_канализации, 
                        int Количество_комнат, 
                        string Прочность_и_долговечность, 
                        string Энергетическая_эффективность, 
                        string Санузел) {
                Проекты_домовRow rowПроекты_домовRow = ((Проекты_домовRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Стоимость_материалов,
                        Стоимость_строительных_работ,
                        Размер_участка,
                        Площадь_дома,
                        Количество_этажей,
                        Тип_фундамента,
                        Материалы_стен,
                        Толщина_стен,
                        Перегородка_мансардного_этажа,
                        Материалы_полов,
                        Материалы_потолков,
                        Оконные_рамы,
                        Типы_дверей,
                        Материалы_кровли,
                        Вид_отопления,
                        Тип_канализации,
                        Количество_комнат,
                        Прочность_и_долговечность,
                        Энергетическая_эффективность,
                        Санузел};
                if ((parentСтоимость_постройки_домаRowByFK_Проекты_домов_Стоимость_постройки_дома != null)) {
                    columnValuesArray[0] = parentСтоимость_постройки_домаRowByFK_Проекты_домов_Стоимость_постройки_дома[1];
                }
                rowПроекты_домовRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowПроекты_домовRow);
                return rowПроекты_домовRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public Проекты_домовRow FindByНомер_проекта_дома(int Номер_проекта_дома) {
                return ((Проекты_домовRow)(this.Rows.Find(new object[] {
                            Номер_проекта_дома})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                Проекты_домовDataTable cln = ((Проекты_домовDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Проекты_домовDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal void InitVars() {
                this.columnНомер_проекта_дома = base.Columns["Номер проекта дома"];
                this.columnСтоимость_материалов = base.Columns["Стоимость материалов"];
                this.columnСтоимость_строительных_работ = base.Columns["Стоимость строительных работ"];
                this.columnРазмер_участка = base.Columns["Размер участка"];
                this.columnПлощадь_дома = base.Columns["Площадь дома"];
                this.columnКоличество_этажей = base.Columns["Количество этажей"];
                this.columnТип_фундамента = base.Columns["Тип фундамента"];
                this.columnМатериалы_стен = base.Columns["Материалы стен"];
                this.columnТолщина_стен = base.Columns["Толщина стен"];
                this.columnПерегородка_мансардного_этажа = base.Columns["Перегородка мансардного этажа"];
                this.columnМатериалы_полов = base.Columns["Материалы полов"];
                this.columnМатериалы_потолков = base.Columns["Материалы потолков"];
                this.columnОконные_рамы = base.Columns["Оконные рамы"];
                this.columnТипы_дверей = base.Columns["Типы дверей"];
                this.columnМатериалы_кровли = base.Columns["Материалы кровли"];
                this.columnВид_отопления = base.Columns["Вид отопления"];
                this.columnТип_канализации = base.Columns["Тип канализации"];
                this.columnКоличество_комнат = base.Columns["Количество комнат"];
                this.columnПрочность_и_долговечность = base.Columns["Прочность и долговечность"];
                this.columnЭнергетическая_эффективность = base.Columns["Энергетическая эффективность"];
                this.columnСанузел = base.Columns["Санузел"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitClass() {
                this.columnНомер_проекта_дома = new global::System.Data.DataColumn("Номер проекта дома", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnНомер_проекта_дома);
                this.columnСтоимость_материалов = new global::System.Data.DataColumn("Стоимость материалов", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnСтоимость_материалов);
                this.columnСтоимость_строительных_работ = new global::System.Data.DataColumn("Стоимость строительных работ", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnСтоимость_строительных_работ);
                this.columnРазмер_участка = new global::System.Data.DataColumn("Размер участка", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnРазмер_участка);
                this.columnПлощадь_дома = new global::System.Data.DataColumn("Площадь дома", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnПлощадь_дома);
                this.columnКоличество_этажей = new global::System.Data.DataColumn("Количество этажей", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnКоличество_этажей);
                this.columnТип_фундамента = new global::System.Data.DataColumn("Тип фундамента", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnТип_фундамента);
                this.columnМатериалы_стен = new global::System.Data.DataColumn("Материалы стен", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnМатериалы_стен);
                this.columnТолщина_стен = new global::System.Data.DataColumn("Толщина стен", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnТолщина_стен);
                this.columnПерегородка_мансардного_этажа = new global::System.Data.DataColumn("Перегородка мансардного этажа", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnПерегородка_мансардного_этажа);
                this.columnМатериалы_полов = new global::System.Data.DataColumn("Материалы полов", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnМатериалы_полов);
                this.columnМатериалы_потолков = new global::System.Data.DataColumn("Материалы потолков", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnМатериалы_потолков);
                this.columnОконные_рамы = new global::System.Data.DataColumn("Оконные рамы", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnОконные_рамы);
                this.columnТипы_дверей = new global::System.Data.DataColumn("Типы дверей", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnТипы_дверей);
                this.columnМатериалы_кровли = new global::System.Data.DataColumn("Материалы кровли", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnМатериалы_кровли);
                this.columnВид_отопления = new global::System.Data.DataColumn("Вид отопления", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnВид_отопления);
                this.columnТип_канализации = new global::System.Data.DataColumn("Тип канализации", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnТип_канализации);
                this.columnКоличество_комнат = new global::System.Data.DataColumn("Количество комнат", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnКоличество_комнат);
                this.columnПрочность_и_долговечность = new global::System.Data.DataColumn("Прочность и долговечность", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnПрочность_и_долговечность);
                this.columnЭнергетическая_эффективность = new global::System.Data.DataColumn("Энергетическая эффективность", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnЭнергетическая_эффективность);
                this.columnСанузел = new global::System.Data.DataColumn("Санузел", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnСанузел);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnНомер_проекта_дома}, true));
                this.columnНомер_проекта_дома.AllowDBNull = false;
                this.columnНомер_проекта_дома.Unique = true;
                this.columnСтоимость_материалов.AllowDBNull = false;
                this.columnСтоимость_строительных_работ.AllowDBNull = false;
                this.columnРазмер_участка.AllowDBNull = false;
                this.columnРазмер_участка.MaxLength = 50;
                this.columnПлощадь_дома.AllowDBNull = false;
                this.columnКоличество_этажей.AllowDBNull = false;
                this.columnТип_фундамента.AllowDBNull = false;
                this.columnТип_фундамента.MaxLength = 50;
                this.columnМатериалы_стен.AllowDBNull = false;
                this.columnМатериалы_стен.MaxLength = 50;
                this.columnТолщина_стен.AllowDBNull = false;
                this.columnТолщина_стен.MaxLength = 50;
                this.columnПерегородка_мансардного_этажа.AllowDBNull = false;
                this.columnПерегородка_мансардного_этажа.MaxLength = 50;
                this.columnМатериалы_полов.AllowDBNull = false;
                this.columnМатериалы_полов.MaxLength = 50;
                this.columnМатериалы_потолков.AllowDBNull = false;
                this.columnМатериалы_потолков.MaxLength = 50;
                this.columnОконные_рамы.AllowDBNull = false;
                this.columnОконные_рамы.MaxLength = 50;
                this.columnТипы_дверей.AllowDBNull = false;
                this.columnТипы_дверей.MaxLength = 50;
                this.columnМатериалы_кровли.AllowDBNull = false;
                this.columnМатериалы_кровли.MaxLength = 50;
                this.columnВид_отопления.AllowDBNull = false;
                this.columnВид_отопления.MaxLength = 50;
                this.columnТип_канализации.AllowDBNull = false;
                this.columnТип_канализации.MaxLength = 50;
                this.columnКоличество_комнат.AllowDBNull = false;
                this.columnПрочность_и_долговечность.AllowDBNull = false;
                this.columnПрочность_и_долговечность.MaxLength = 50;
                this.columnЭнергетическая_эффективность.AllowDBNull = false;
                this.columnЭнергетическая_эффективность.MaxLength = 50;
                this.columnСанузел.AllowDBNull = false;
                this.columnСанузел.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public Проекты_домовRow NewПроекты_домовRow() {
                return ((Проекты_домовRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Проекты_домовRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(Проекты_домовRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Проекты_домовRowChanged != null)) {
                    this.Проекты_домовRowChanged(this, new Проекты_домовRowChangeEvent(((Проекты_домовRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Проекты_домовRowChanging != null)) {
                    this.Проекты_домовRowChanging(this, new Проекты_домовRowChangeEvent(((Проекты_домовRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Проекты_домовRowDeleted != null)) {
                    this.Проекты_домовRowDeleted(this, new Проекты_домовRowChangeEvent(((Проекты_домовRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Проекты_домовRowDeleting != null)) {
                    this.Проекты_домовRowDeleting(this, new Проекты_домовRowChangeEvent(((Проекты_домовRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void RemoveПроекты_домовRow(Проекты_домовRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DiplommDataSet ds = new DiplommDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Проекты_домовDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Стоимость_постройки_домаDataTable : global::System.Data.TypedTableBase<Стоимость_постройки_домаRow> {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnНомер_проекта_дома;
            
            private global::System.Data.DataColumn columnОбщая_стоимость_дома;
            
            private global::System.Data.DataColumn columnСрок_постройки_дома;
            
            private global::System.Data.DataColumn columnСтоимость_земельного_участка;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public Стоимость_постройки_домаDataTable() {
                this.TableName = "Стоимость постройки дома";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal Стоимость_постройки_домаDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected Стоимость_постройки_домаDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Номер_проекта_домаColumn {
                get {
                    return this.columnНомер_проекта_дома;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Общая_стоимость_домаColumn {
                get {
                    return this.columnОбщая_стоимость_дома;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Срок_постройки_домаColumn {
                get {
                    return this.columnСрок_постройки_дома;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Стоимость_земельного_участкаColumn {
                get {
                    return this.columnСтоимость_земельного_участка;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public Стоимость_постройки_домаRow this[int index] {
                get {
                    return ((Стоимость_постройки_домаRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event Стоимость_постройки_домаRowChangeEventHandler Стоимость_постройки_домаRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event Стоимость_постройки_домаRowChangeEventHandler Стоимость_постройки_домаRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event Стоимость_постройки_домаRowChangeEventHandler Стоимость_постройки_домаRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event Стоимость_постройки_домаRowChangeEventHandler Стоимость_постройки_домаRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void AddСтоимость_постройки_домаRow(Стоимость_постройки_домаRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public Стоимость_постройки_домаRow AddСтоимость_постройки_домаRow(ПользовательRow parentПользовательRowByFK_Стоимость_постройки_дома_Пользователь, int Номер_проекта_дома, decimal Общая_стоимость_дома, string Срок_постройки_дома, decimal Стоимость_земельного_участка) {
                Стоимость_постройки_домаRow rowСтоимость_постройки_домаRow = ((Стоимость_постройки_домаRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Номер_проекта_дома,
                        Общая_стоимость_дома,
                        Срок_постройки_дома,
                        Стоимость_земельного_участка};
                if ((parentПользовательRowByFK_Стоимость_постройки_дома_Пользователь != null)) {
                    columnValuesArray[0] = parentПользовательRowByFK_Стоимость_постройки_дома_Пользователь[0];
                }
                rowСтоимость_постройки_домаRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowСтоимость_постройки_домаRow);
                return rowСтоимость_постройки_домаRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public Стоимость_постройки_домаRow FindByНомер_проекта_дома(int Номер_проекта_дома) {
                return ((Стоимость_постройки_домаRow)(this.Rows.Find(new object[] {
                            Номер_проекта_дома})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                Стоимость_постройки_домаDataTable cln = ((Стоимость_постройки_домаDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Стоимость_постройки_домаDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnНомер_проекта_дома = base.Columns["Номер проекта дома"];
                this.columnОбщая_стоимость_дома = base.Columns["Общая стоимость дома"];
                this.columnСрок_постройки_дома = base.Columns["Срок постройки дома"];
                this.columnСтоимость_земельного_участка = base.Columns["Стоимость земельного участка"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnНомер_проекта_дома = new global::System.Data.DataColumn("Номер проекта дома", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnНомер_проекта_дома);
                this.columnОбщая_стоимость_дома = new global::System.Data.DataColumn("Общая стоимость дома", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnОбщая_стоимость_дома);
                this.columnСрок_постройки_дома = new global::System.Data.DataColumn("Срок постройки дома", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnСрок_постройки_дома);
                this.columnСтоимость_земельного_участка = new global::System.Data.DataColumn("Стоимость земельного участка", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnСтоимость_земельного_участка);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnНомер_проекта_дома}, true));
                this.columnid.AllowDBNull = false;
                this.columnНомер_проекта_дома.AllowDBNull = false;
                this.columnНомер_проекта_дома.Unique = true;
                this.columnОбщая_стоимость_дома.AllowDBNull = false;
                this.columnСрок_постройки_дома.AllowDBNull = false;
                this.columnСрок_постройки_дома.MaxLength = 50;
                this.columnСтоимость_земельного_участка.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public Стоимость_постройки_домаRow NewСтоимость_постройки_домаRow() {
                return ((Стоимость_постройки_домаRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Стоимость_постройки_домаRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(Стоимость_постройки_домаRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Стоимость_постройки_домаRowChanged != null)) {
                    this.Стоимость_постройки_домаRowChanged(this, new Стоимость_постройки_домаRowChangeEvent(((Стоимость_постройки_домаRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Стоимость_постройки_домаRowChanging != null)) {
                    this.Стоимость_постройки_домаRowChanging(this, new Стоимость_постройки_домаRowChangeEvent(((Стоимость_постройки_домаRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Стоимость_постройки_домаRowDeleted != null)) {
                    this.Стоимость_постройки_домаRowDeleted(this, new Стоимость_постройки_домаRowChangeEvent(((Стоимость_постройки_домаRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Стоимость_постройки_домаRowDeleting != null)) {
                    this.Стоимость_постройки_домаRowDeleting(this, new Стоимость_постройки_домаRowChangeEvent(((Стоимость_постройки_домаRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void RemoveСтоимость_постройки_домаRow(Стоимость_постройки_домаRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DiplommDataSet ds = new DiplommDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Стоимость_постройки_домаDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class УчастокDataTable : global::System.Data.TypedTableBase<УчастокRow> {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnСтоимость_участка;
            
            private global::System.Data.DataColumn columnНомер_участка;
            
            private global::System.Data.DataColumn columnУточнённая_площадь;
            
            private global::System.Data.DataColumn columnКатегория_земель;
            
            private global::System.Data.DataColumn columnКадастровый_номер;
            
            private global::System.Data.DataColumn columnЭлектроснабжение;
            
            private global::System.Data.DataColumn columnВысота_проводов_над_уровнем_земли;
            
            private global::System.Data.DataColumn columnРасстояние_до_опоры;
            
            private global::System.Data.DataColumn columnПротяжённость_отводной_линии;
            
            private global::System.Data.DataColumn columnГазоснабжение;
            
            private global::System.Data.DataColumn columnРасстояние_от_подземного_газопровода_до_фундамента;
            
            private global::System.Data.DataColumn columnРасстояние_до_газовой_магистрали;
            
            private global::System.Data.DataColumn columnВодоснабжение;
            
            private global::System.Data.DataColumn columnРасстояние_до_фундамента_дома;
            
            private global::System.Data.DataColumn columnРасстояние_от_ограждений;
            
            private global::System.Data.DataColumn columnРасстояние_от_ствола_дерева;
            
            private global::System.Data.DataColumn columnРасстояние_от_других_инженерных_сетей;
            
            private global::System.Data.DataColumn columnРасстояние_водопроводных_колодцев_от_фундамента_дома;
            
            private global::System.Data.DataColumn columnТип_канализации;
            
            private global::System.Data.DataColumn columnДиаметры_труб;
            
            private global::System.Data.DataColumn columnМинимальная_глубина_заложения_лотка_трубопровода;
            
            private global::System.Data.DataColumn columnСмотровые_колодцы;
            
            private global::System.Data.DataColumn columnРасстояние_до_дороги;
            
            private global::System.Data.DataColumn columnРасстояние_от_источника_питьевой_воды;
            
            private global::System.Data.DataColumn columnРасстояние_от_деревьев;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public УчастокDataTable() {
                this.TableName = "Участок";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal УчастокDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected УчастокDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Стоимость_участкаColumn {
                get {
                    return this.columnСтоимость_участка;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Номер_участкаColumn {
                get {
                    return this.columnНомер_участка;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Уточнённая_площадьColumn {
                get {
                    return this.columnУточнённая_площадь;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Категория_земельColumn {
                get {
                    return this.columnКатегория_земель;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Кадастровый_номерColumn {
                get {
                    return this.columnКадастровый_номер;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ЭлектроснабжениеColumn {
                get {
                    return this.columnЭлектроснабжение;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Высота_проводов_над_уровнем_землиColumn {
                get {
                    return this.columnВысота_проводов_над_уровнем_земли;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Расстояние_до_опорыColumn {
                get {
                    return this.columnРасстояние_до_опоры;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Протяжённость_отводной_линииColumn {
                get {
                    return this.columnПротяжённость_отводной_линии;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ГазоснабжениеColumn {
                get {
                    return this.columnГазоснабжение;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Расстояние_от_подземного_газопровода_до_фундаментаColumn {
                get {
                    return this.columnРасстояние_от_подземного_газопровода_до_фундамента;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Расстояние_до_газовой_магистралиColumn {
                get {
                    return this.columnРасстояние_до_газовой_магистрали;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn ВодоснабжениеColumn {
                get {
                    return this.columnВодоснабжение;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Расстояние_до_фундамента_домаColumn {
                get {
                    return this.columnРасстояние_до_фундамента_дома;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Расстояние_от_огражденийColumn {
                get {
                    return this.columnРасстояние_от_ограждений;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Расстояние_от_ствола_дереваColumn {
                get {
                    return this.columnРасстояние_от_ствола_дерева;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Расстояние_от_других_инженерных_сетейColumn {
                get {
                    return this.columnРасстояние_от_других_инженерных_сетей;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Расстояние_водопроводных_колодцев_от_фундамента_домаColumn {
                get {
                    return this.columnРасстояние_водопроводных_колодцев_от_фундамента_дома;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Тип_канализацииColumn {
                get {
                    return this.columnТип_канализации;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Диаметры_трубColumn {
                get {
                    return this.columnДиаметры_труб;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Минимальная_глубина_заложения_лотка_трубопроводаColumn {
                get {
                    return this.columnМинимальная_глубина_заложения_лотка_трубопровода;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Смотровые_колодцыColumn {
                get {
                    return this.columnСмотровые_колодцы;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Расстояние_до_дорогиColumn {
                get {
                    return this.columnРасстояние_до_дороги;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Расстояние_от_источника_питьевой_водыColumn {
                get {
                    return this.columnРасстояние_от_источника_питьевой_воды;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Расстояние_от_деревьевColumn {
                get {
                    return this.columnРасстояние_от_деревьев;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public УчастокRow this[int index] {
                get {
                    return ((УчастокRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event УчастокRowChangeEventHandler УчастокRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event УчастокRowChangeEventHandler УчастокRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event УчастокRowChangeEventHandler УчастокRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event УчастокRowChangeEventHandler УчастокRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void AddУчастокRow(УчастокRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public УчастокRow AddУчастокRow(
                        ПользовательRow parentПользовательRowByFK_Участок_Пользователь, 
                        decimal Стоимость_участка, 
                        int Номер_участка, 
                        int Уточнённая_площадь, 
                        string Категория_земель, 
                        string Кадастровый_номер, 
                        bool Электроснабжение, 
                        int Высота_проводов_над_уровнем_земли, 
                        int Расстояние_до_опоры, 
                        int Протяжённость_отводной_линии, 
                        bool Газоснабжение, 
                        int Расстояние_от_подземного_газопровода_до_фундамента, 
                        int Расстояние_до_газовой_магистрали, 
                        bool Водоснабжение, 
                        int Расстояние_до_фундамента_дома, 
                        int Расстояние_от_ограждений, 
                        int Расстояние_от_ствола_дерева, 
                        int Расстояние_от_других_инженерных_сетей, 
                        int Расстояние_водопроводных_колодцев_от_фундамента_дома, 
                        string Тип_канализации, 
                        int Диаметры_труб, 
                        int Минимальная_глубина_заложения_лотка_трубопровода, 
                        string Смотровые_колодцы, 
                        int Расстояние_до_дороги, 
                        int Расстояние_от_источника_питьевой_воды, 
                        int Расстояние_от_деревьев) {
                УчастокRow rowУчастокRow = ((УчастокRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Стоимость_участка,
                        Номер_участка,
                        Уточнённая_площадь,
                        Категория_земель,
                        Кадастровый_номер,
                        Электроснабжение,
                        Высота_проводов_над_уровнем_земли,
                        Расстояние_до_опоры,
                        Протяжённость_отводной_линии,
                        Газоснабжение,
                        Расстояние_от_подземного_газопровода_до_фундамента,
                        Расстояние_до_газовой_магистрали,
                        Водоснабжение,
                        Расстояние_до_фундамента_дома,
                        Расстояние_от_ограждений,
                        Расстояние_от_ствола_дерева,
                        Расстояние_от_других_инженерных_сетей,
                        Расстояние_водопроводных_колодцев_от_фундамента_дома,
                        Тип_канализации,
                        Диаметры_труб,
                        Минимальная_глубина_заложения_лотка_трубопровода,
                        Смотровые_колодцы,
                        Расстояние_до_дороги,
                        Расстояние_от_источника_питьевой_воды,
                        Расстояние_от_деревьев};
                if ((parentПользовательRowByFK_Участок_Пользователь != null)) {
                    columnValuesArray[0] = parentПользовательRowByFK_Участок_Пользователь[0];
                }
                rowУчастокRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowУчастокRow);
                return rowУчастокRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public УчастокRow FindByid(int id) {
                return ((УчастокRow)(this.Rows.Find(new object[] {
                            id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                УчастокDataTable cln = ((УчастокDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new УчастокDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnСтоимость_участка = base.Columns["Стоимость участка"];
                this.columnНомер_участка = base.Columns["Номер участка"];
                this.columnУточнённая_площадь = base.Columns["Уточнённая площадь"];
                this.columnКатегория_земель = base.Columns["Категория земель"];
                this.columnКадастровый_номер = base.Columns["Кадастровый номер"];
                this.columnЭлектроснабжение = base.Columns["Электроснабжение"];
                this.columnВысота_проводов_над_уровнем_земли = base.Columns["Высота проводов над уровнем земли"];
                this.columnРасстояние_до_опоры = base.Columns["Расстояние до опоры"];
                this.columnПротяжённость_отводной_линии = base.Columns["Протяжённость отводной линии"];
                this.columnГазоснабжение = base.Columns["Газоснабжение"];
                this.columnРасстояние_от_подземного_газопровода_до_фундамента = base.Columns["Расстояние от подземного газопровода до фундамента"];
                this.columnРасстояние_до_газовой_магистрали = base.Columns["Расстояние до газовой магистрали"];
                this.columnВодоснабжение = base.Columns["Водоснабжение"];
                this.columnРасстояние_до_фундамента_дома = base.Columns["Расстояние до фундамента дома"];
                this.columnРасстояние_от_ограждений = base.Columns["Расстояние от ограждений"];
                this.columnРасстояние_от_ствола_дерева = base.Columns["Расстояние от ствола дерева"];
                this.columnРасстояние_от_других_инженерных_сетей = base.Columns["Расстояние от других инженерных сетей"];
                this.columnРасстояние_водопроводных_колодцев_от_фундамента_дома = base.Columns["Расстояние водопроводных колодцев от фундамента дома"];
                this.columnТип_канализации = base.Columns["Тип канализации"];
                this.columnДиаметры_труб = base.Columns["Диаметры труб"];
                this.columnМинимальная_глубина_заложения_лотка_трубопровода = base.Columns["Минимальная глубина заложения лотка трубопровода"];
                this.columnСмотровые_колодцы = base.Columns["Смотровые колодцы"];
                this.columnРасстояние_до_дороги = base.Columns["Расстояние до дороги"];
                this.columnРасстояние_от_источника_питьевой_воды = base.Columns["Расстояние от источника питьевой воды"];
                this.columnРасстояние_от_деревьев = base.Columns["Расстояние от деревьев"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnСтоимость_участка = new global::System.Data.DataColumn("Стоимость участка", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnСтоимость_участка);
                this.columnНомер_участка = new global::System.Data.DataColumn("Номер участка", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnНомер_участка);
                this.columnУточнённая_площадь = new global::System.Data.DataColumn("Уточнённая площадь", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnУточнённая_площадь);
                this.columnКатегория_земель = new global::System.Data.DataColumn("Категория земель", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnКатегория_земель);
                this.columnКадастровый_номер = new global::System.Data.DataColumn("Кадастровый номер", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnКадастровый_номер);
                this.columnЭлектроснабжение = new global::System.Data.DataColumn("Электроснабжение", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnЭлектроснабжение);
                this.columnВысота_проводов_над_уровнем_земли = new global::System.Data.DataColumn("Высота проводов над уровнем земли", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnВысота_проводов_над_уровнем_земли);
                this.columnРасстояние_до_опоры = new global::System.Data.DataColumn("Расстояние до опоры", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnРасстояние_до_опоры);
                this.columnПротяжённость_отводной_линии = new global::System.Data.DataColumn("Протяжённость отводной линии", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnПротяжённость_отводной_линии);
                this.columnГазоснабжение = new global::System.Data.DataColumn("Газоснабжение", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnГазоснабжение);
                this.columnРасстояние_от_подземного_газопровода_до_фундамента = new global::System.Data.DataColumn("Расстояние от подземного газопровода до фундамента", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnРасстояние_от_подземного_газопровода_до_фундамента);
                this.columnРасстояние_до_газовой_магистрали = new global::System.Data.DataColumn("Расстояние до газовой магистрали", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnРасстояние_до_газовой_магистрали);
                this.columnВодоснабжение = new global::System.Data.DataColumn("Водоснабжение", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnВодоснабжение);
                this.columnРасстояние_до_фундамента_дома = new global::System.Data.DataColumn("Расстояние до фундамента дома", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnРасстояние_до_фундамента_дома);
                this.columnРасстояние_от_ограждений = new global::System.Data.DataColumn("Расстояние от ограждений", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnРасстояние_от_ограждений);
                this.columnРасстояние_от_ствола_дерева = new global::System.Data.DataColumn("Расстояние от ствола дерева", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnРасстояние_от_ствола_дерева);
                this.columnРасстояние_от_других_инженерных_сетей = new global::System.Data.DataColumn("Расстояние от других инженерных сетей", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnРасстояние_от_других_инженерных_сетей);
                this.columnРасстояние_водопроводных_колодцев_от_фундамента_дома = new global::System.Data.DataColumn("Расстояние водопроводных колодцев от фундамента дома", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnРасстояние_водопроводных_колодцев_от_фундамента_дома);
                this.columnТип_канализации = new global::System.Data.DataColumn("Тип канализации", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnТип_канализации);
                this.columnДиаметры_труб = new global::System.Data.DataColumn("Диаметры труб", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnДиаметры_труб);
                this.columnМинимальная_глубина_заложения_лотка_трубопровода = new global::System.Data.DataColumn("Минимальная глубина заложения лотка трубопровода", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnМинимальная_глубина_заложения_лотка_трубопровода);
                this.columnСмотровые_колодцы = new global::System.Data.DataColumn("Смотровые колодцы", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnСмотровые_колодцы);
                this.columnРасстояние_до_дороги = new global::System.Data.DataColumn("Расстояние до дороги", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnРасстояние_до_дороги);
                this.columnРасстояние_от_источника_питьевой_воды = new global::System.Data.DataColumn("Расстояние от источника питьевой воды", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnРасстояние_от_источника_питьевой_воды);
                this.columnРасстояние_от_деревьев = new global::System.Data.DataColumn("Расстояние от деревьев", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnРасстояние_от_деревьев);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnid}, true));
                this.columnid.AllowDBNull = false;
                this.columnid.Unique = true;
                this.columnСтоимость_участка.AllowDBNull = false;
                this.columnНомер_участка.AllowDBNull = false;
                this.columnУточнённая_площадь.AllowDBNull = false;
                this.columnКатегория_земель.AllowDBNull = false;
                this.columnКатегория_земель.MaxLength = 50;
                this.columnКадастровый_номер.AllowDBNull = false;
                this.columnКадастровый_номер.MaxLength = 50;
                this.columnЭлектроснабжение.AllowDBNull = false;
                this.columnВысота_проводов_над_уровнем_земли.AllowDBNull = false;
                this.columnРасстояние_до_опоры.AllowDBNull = false;
                this.columnПротяжённость_отводной_линии.AllowDBNull = false;
                this.columnГазоснабжение.AllowDBNull = false;
                this.columnРасстояние_от_подземного_газопровода_до_фундамента.AllowDBNull = false;
                this.columnРасстояние_до_газовой_магистрали.AllowDBNull = false;
                this.columnВодоснабжение.AllowDBNull = false;
                this.columnРасстояние_до_фундамента_дома.AllowDBNull = false;
                this.columnРасстояние_от_ограждений.AllowDBNull = false;
                this.columnРасстояние_от_ствола_дерева.AllowDBNull = false;
                this.columnРасстояние_от_других_инженерных_сетей.AllowDBNull = false;
                this.columnРасстояние_водопроводных_колодцев_от_фундамента_дома.AllowDBNull = false;
                this.columnТип_канализации.AllowDBNull = false;
                this.columnТип_канализации.MaxLength = 50;
                this.columnДиаметры_труб.AllowDBNull = false;
                this.columnМинимальная_глубина_заложения_лотка_трубопровода.AllowDBNull = false;
                this.columnСмотровые_колодцы.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public УчастокRow NewУчастокRow() {
                return ((УчастокRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new УчастокRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(УчастокRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.УчастокRowChanged != null)) {
                    this.УчастокRowChanged(this, new УчастокRowChangeEvent(((УчастокRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.УчастокRowChanging != null)) {
                    this.УчастокRowChanging(this, new УчастокRowChangeEvent(((УчастокRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.УчастокRowDeleted != null)) {
                    this.УчастокRowDeleted(this, new УчастокRowChangeEvent(((УчастокRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.УчастокRowDeleting != null)) {
                    this.УчастокRowDeleting(this, new УчастокRowChangeEvent(((УчастокRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void RemoveУчастокRow(УчастокRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DiplommDataSet ds = new DiplommDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "УчастокDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ДомRow : global::System.Data.DataRow {
            
            private ДомDataTable tableДом;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal ДомRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableДом = ((ДомDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int id {
                get {
                    return ((int)(this[this.tableДом.idColumn]));
                }
                set {
                    this[this.tableДом.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int Проект_дома {
                get {
                    return ((int)(this[this.tableДом.Проект_домаColumn]));
                }
                set {
                    this[this.tableДом.Проект_домаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Площадь_дома {
                get {
                    return ((string)(this[this.tableДом.Площадь_домаColumn]));
                }
                set {
                    this[this.tableДом.Площадь_домаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int Количество_этажей {
                get {
                    return ((int)(this[this.tableДом.Количество_этажейColumn]));
                }
                set {
                    this[this.tableДом.Количество_этажейColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Адрес_дома {
                get {
                    return ((string)(this[this.tableДом.Адрес_домаColumn]));
                }
                set {
                    this[this.tableДом.Адрес_домаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ПользовательRow ПользовательRow {
                get {
                    return ((ПользовательRow)(this.GetParentRow(this.Table.ParentRelations["FK_Дом_Пользователь"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Дом_Пользователь"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class Населённый_пунктRow : global::System.Data.DataRow {
            
            private Населённый_пунктDataTable tableНаселённый_пункт;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal Населённый_пунктRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableНаселённый_пункт = ((Населённый_пунктDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int id {
                get {
                    return ((int)(this[this.tableНаселённый_пункт.idColumn]));
                }
                set {
                    this[this.tableНаселённый_пункт.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Название_населенного_пункта {
                get {
                    return ((string)(this[this.tableНаселённый_пункт.Название_населенного_пунктаColumn]));
                }
                set {
                    this[this.tableНаселённый_пункт.Название_населенного_пунктаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Комуникации_в_населенном_пункте {
                get {
                    return ((string)(this[this.tableНаселённый_пункт.Комуникации_в_населенном_пунктеColumn]));
                }
                set {
                    this[this.tableНаселённый_пункт.Комуникации_в_населенном_пунктеColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int Количество__выкупленнных_участков {
                get {
                    try {
                        return ((int)(this[this.tableНаселённый_пункт.Количество__выкупленнных_участковColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'Количество  выкупленнных участков\' в таблице \'Населённый пу" +
                                "нкт\' равно DBNull.", e);
                    }
                }
                set {
                    this[this.tableНаселённый_пункт.Количество__выкупленнных_участковColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int Количество_участков_в_продаже {
                get {
                    try {
                        return ((int)(this[this.tableНаселённый_пункт.Количество_участков_в_продажеColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'Количество участков в продаже\' в таблице \'Населённый пункт\'" +
                                " равно DBNull.", e);
                    }
                }
                set {
                    this[this.tableНаселённый_пункт.Количество_участков_в_продажеColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int Количество_строющихся_домов {
                get {
                    try {
                        return ((int)(this[this.tableНаселённый_пункт.Количество_строющихся_домовColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'Количество строющихся домов\' в таблице \'Населённый пункт\' р" +
                                "авно DBNull.", e);
                    }
                }
                set {
                    this[this.tableНаселённый_пункт.Количество_строющихся_домовColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ПользовательRow ПользовательRow {
                get {
                    return ((ПользовательRow)(this.GetParentRow(this.Table.ParentRelations["FK_Населённый пункт_Пользователь"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Населённый пункт_Пользователь"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsКоличество__выкупленнных_участковNull() {
                return this.IsNull(this.tableНаселённый_пункт.Количество__выкупленнных_участковColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetКоличество__выкупленнных_участковNull() {
                this[this.tableНаселённый_пункт.Количество__выкупленнных_участковColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsКоличество_участков_в_продажеNull() {
                return this.IsNull(this.tableНаселённый_пункт.Количество_участков_в_продажеColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetКоличество_участков_в_продажеNull() {
                this[this.tableНаселённый_пункт.Количество_участков_в_продажеColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsКоличество_строющихся_домовNull() {
                return this.IsNull(this.tableНаселённый_пункт.Количество_строющихся_домовColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetКоличество_строющихся_домовNull() {
                this[this.tableНаселённый_пункт.Количество_строющихся_домовColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ПользовательRow : global::System.Data.DataRow {
            
            private ПользовательDataTable tableПользователь;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal ПользовательRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableПользователь = ((ПользовательDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int id {
                get {
                    return ((int)(this[this.tableПользователь.idColumn]));
                }
                set {
                    this[this.tableПользователь.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Логин {
                get {
                    return ((string)(this[this.tableПользователь.ЛогинColumn]));
                }
                set {
                    this[this.tableПользователь.ЛогинColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Пароль {
                get {
                    return ((string)(this[this.tableПользователь.ПарольColumn]));
                }
                set {
                    this[this.tableПользователь.ПарольColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int Доступ {
                get {
                    return ((int)(this[this.tableПользователь.ДоступColumn]));
                }
                set {
                    this[this.tableПользователь.ДоступColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ДомRow[] GetДомRows() {
                if ((this.Table.ChildRelations["FK_Дом_Пользователь"] == null)) {
                    return new ДомRow[0];
                }
                else {
                    return ((ДомRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Дом_Пользователь"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public Населённый_пунктRow[] GetНаселённый_пунктRows() {
                if ((this.Table.ChildRelations["FK_Населённый пункт_Пользователь"] == null)) {
                    return new Населённый_пунктRow[0];
                }
                else {
                    return ((Населённый_пунктRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Населённый пункт_Пользователь"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public Стоимость_постройки_домаRow[] GetСтоимость_постройки_домаRows() {
                if ((this.Table.ChildRelations["FK_Стоимость постройки дома_Пользователь"] == null)) {
                    return new Стоимость_постройки_домаRow[0];
                }
                else {
                    return ((Стоимость_постройки_домаRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Стоимость постройки дома_Пользователь"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public УчастокRow[] GetУчастокRows() {
                if ((this.Table.ChildRelations["FK_Участок_Пользователь"] == null)) {
                    return new УчастокRow[0];
                }
                else {
                    return ((УчастокRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Участок_Пользователь"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class Проекты_домовRow : global::System.Data.DataRow {
            
            private Проекты_домовDataTable tableПроекты_домов;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal Проекты_домовRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableПроекты_домов = ((Проекты_домовDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int Номер_проекта_дома {
                get {
                    return ((int)(this[this.tableПроекты_домов.Номер_проекта_домаColumn]));
                }
                set {
                    this[this.tableПроекты_домов.Номер_проекта_домаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal Стоимость_материалов {
                get {
                    return ((decimal)(this[this.tableПроекты_домов.Стоимость_материаловColumn]));
                }
                set {
                    this[this.tableПроекты_домов.Стоимость_материаловColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal Стоимость_строительных_работ {
                get {
                    return ((decimal)(this[this.tableПроекты_домов.Стоимость_строительных_работColumn]));
                }
                set {
                    this[this.tableПроекты_домов.Стоимость_строительных_работColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Размер_участка {
                get {
                    return ((string)(this[this.tableПроекты_домов.Размер_участкаColumn]));
                }
                set {
                    this[this.tableПроекты_домов.Размер_участкаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int Площадь_дома {
                get {
                    return ((int)(this[this.tableПроекты_домов.Площадь_домаColumn]));
                }
                set {
                    this[this.tableПроекты_домов.Площадь_домаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int Количество_этажей {
                get {
                    return ((int)(this[this.tableПроекты_домов.Количество_этажейColumn]));
                }
                set {
                    this[this.tableПроекты_домов.Количество_этажейColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Тип_фундамента {
                get {
                    return ((string)(this[this.tableПроекты_домов.Тип_фундаментаColumn]));
                }
                set {
                    this[this.tableПроекты_домов.Тип_фундаментаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Материалы_стен {
                get {
                    return ((string)(this[this.tableПроекты_домов.Материалы_стенColumn]));
                }
                set {
                    this[this.tableПроекты_домов.Материалы_стенColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Толщина_стен {
                get {
                    return ((string)(this[this.tableПроекты_домов.Толщина_стенColumn]));
                }
                set {
                    this[this.tableПроекты_домов.Толщина_стенColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Перегородка_мансардного_этажа {
                get {
                    return ((string)(this[this.tableПроекты_домов.Перегородка_мансардного_этажаColumn]));
                }
                set {
                    this[this.tableПроекты_домов.Перегородка_мансардного_этажаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Материалы_полов {
                get {
                    return ((string)(this[this.tableПроекты_домов.Материалы_половColumn]));
                }
                set {
                    this[this.tableПроекты_домов.Материалы_половColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Материалы_потолков {
                get {
                    return ((string)(this[this.tableПроекты_домов.Материалы_потолковColumn]));
                }
                set {
                    this[this.tableПроекты_домов.Материалы_потолковColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Оконные_рамы {
                get {
                    return ((string)(this[this.tableПроекты_домов.Оконные_рамыColumn]));
                }
                set {
                    this[this.tableПроекты_домов.Оконные_рамыColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Типы_дверей {
                get {
                    return ((string)(this[this.tableПроекты_домов.Типы_дверейColumn]));
                }
                set {
                    this[this.tableПроекты_домов.Типы_дверейColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Материалы_кровли {
                get {
                    return ((string)(this[this.tableПроекты_домов.Материалы_кровлиColumn]));
                }
                set {
                    this[this.tableПроекты_домов.Материалы_кровлиColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Вид_отопления {
                get {
                    return ((string)(this[this.tableПроекты_домов.Вид_отопленияColumn]));
                }
                set {
                    this[this.tableПроекты_домов.Вид_отопленияColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Тип_канализации {
                get {
                    return ((string)(this[this.tableПроекты_домов.Тип_канализацииColumn]));
                }
                set {
                    this[this.tableПроекты_домов.Тип_канализацииColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int Количество_комнат {
                get {
                    return ((int)(this[this.tableПроекты_домов.Количество_комнатColumn]));
                }
                set {
                    this[this.tableПроекты_домов.Количество_комнатColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Прочность_и_долговечность {
                get {
                    return ((string)(this[this.tableПроекты_домов.Прочность_и_долговечностьColumn]));
                }
                set {
                    this[this.tableПроекты_домов.Прочность_и_долговечностьColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Энергетическая_эффективность {
                get {
                    return ((string)(this[this.tableПроекты_домов.Энергетическая_эффективностьColumn]));
                }
                set {
                    this[this.tableПроекты_домов.Энергетическая_эффективностьColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Санузел {
                get {
                    return ((string)(this[this.tableПроекты_домов.СанузелColumn]));
                }
                set {
                    this[this.tableПроекты_домов.СанузелColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public Стоимость_постройки_домаRow Стоимость_постройки_домаRow {
                get {
                    return ((Стоимость_постройки_домаRow)(this.GetParentRow(this.Table.ParentRelations["FK_Проекты домов_Стоимость постройки дома"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Проекты домов_Стоимость постройки дома"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class Стоимость_постройки_домаRow : global::System.Data.DataRow {
            
            private Стоимость_постройки_домаDataTable tableСтоимость_постройки_дома;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal Стоимость_постройки_домаRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableСтоимость_постройки_дома = ((Стоимость_постройки_домаDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int id {
                get {
                    return ((int)(this[this.tableСтоимость_постройки_дома.idColumn]));
                }
                set {
                    this[this.tableСтоимость_постройки_дома.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int Номер_проекта_дома {
                get {
                    return ((int)(this[this.tableСтоимость_постройки_дома.Номер_проекта_домаColumn]));
                }
                set {
                    this[this.tableСтоимость_постройки_дома.Номер_проекта_домаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal Общая_стоимость_дома {
                get {
                    return ((decimal)(this[this.tableСтоимость_постройки_дома.Общая_стоимость_домаColumn]));
                }
                set {
                    this[this.tableСтоимость_постройки_дома.Общая_стоимость_домаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Срок_постройки_дома {
                get {
                    return ((string)(this[this.tableСтоимость_постройки_дома.Срок_постройки_домаColumn]));
                }
                set {
                    this[this.tableСтоимость_постройки_дома.Срок_постройки_домаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal Стоимость_земельного_участка {
                get {
                    return ((decimal)(this[this.tableСтоимость_постройки_дома.Стоимость_земельного_участкаColumn]));
                }
                set {
                    this[this.tableСтоимость_постройки_дома.Стоимость_земельного_участкаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ПользовательRow ПользовательRow {
                get {
                    return ((ПользовательRow)(this.GetParentRow(this.Table.ParentRelations["FK_Стоимость постройки дома_Пользователь"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Стоимость постройки дома_Пользователь"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public Проекты_домовRow[] GetПроекты_домовRows() {
                if ((this.Table.ChildRelations["FK_Проекты домов_Стоимость постройки дома"] == null)) {
                    return new Проекты_домовRow[0];
                }
                else {
                    return ((Проекты_домовRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Проекты домов_Стоимость постройки дома"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class УчастокRow : global::System.Data.DataRow {
            
            private УчастокDataTable tableУчасток;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal УчастокRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableУчасток = ((УчастокDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int id {
                get {
                    return ((int)(this[this.tableУчасток.idColumn]));
                }
                set {
                    this[this.tableУчасток.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal Стоимость_участка {
                get {
                    return ((decimal)(this[this.tableУчасток.Стоимость_участкаColumn]));
                }
                set {
                    this[this.tableУчасток.Стоимость_участкаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int Номер_участка {
                get {
                    return ((int)(this[this.tableУчасток.Номер_участкаColumn]));
                }
                set {
                    this[this.tableУчасток.Номер_участкаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int Уточнённая_площадь {
                get {
                    return ((int)(this[this.tableУчасток.Уточнённая_площадьColumn]));
                }
                set {
                    this[this.tableУчасток.Уточнённая_площадьColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Категория_земель {
                get {
                    return ((string)(this[this.tableУчасток.Категория_земельColumn]));
                }
                set {
                    this[this.tableУчасток.Категория_земельColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Кадастровый_номер {
                get {
                    return ((string)(this[this.tableУчасток.Кадастровый_номерColumn]));
                }
                set {
                    this[this.tableУчасток.Кадастровый_номерColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool Электроснабжение {
                get {
                    return ((bool)(this[this.tableУчасток.ЭлектроснабжениеColumn]));
                }
                set {
                    this[this.tableУчасток.ЭлектроснабжениеColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int Высота_проводов_над_уровнем_земли {
                get {
                    return ((int)(this[this.tableУчасток.Высота_проводов_над_уровнем_землиColumn]));
                }
                set {
                    this[this.tableУчасток.Высота_проводов_над_уровнем_землиColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int Расстояние_до_опоры {
                get {
                    return ((int)(this[this.tableУчасток.Расстояние_до_опорыColumn]));
                }
                set {
                    this[this.tableУчасток.Расстояние_до_опорыColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int Протяжённость_отводной_линии {
                get {
                    return ((int)(this[this.tableУчасток.Протяжённость_отводной_линииColumn]));
                }
                set {
                    this[this.tableУчасток.Протяжённость_отводной_линииColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool Газоснабжение {
                get {
                    return ((bool)(this[this.tableУчасток.ГазоснабжениеColumn]));
                }
                set {
                    this[this.tableУчасток.ГазоснабжениеColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int Расстояние_от_подземного_газопровода_до_фундамента {
                get {
                    return ((int)(this[this.tableУчасток.Расстояние_от_подземного_газопровода_до_фундаментаColumn]));
                }
                set {
                    this[this.tableУчасток.Расстояние_от_подземного_газопровода_до_фундаментаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int Расстояние_до_газовой_магистрали {
                get {
                    return ((int)(this[this.tableУчасток.Расстояние_до_газовой_магистралиColumn]));
                }
                set {
                    this[this.tableУчасток.Расстояние_до_газовой_магистралиColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool Водоснабжение {
                get {
                    return ((bool)(this[this.tableУчасток.ВодоснабжениеColumn]));
                }
                set {
                    this[this.tableУчасток.ВодоснабжениеColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int Расстояние_до_фундамента_дома {
                get {
                    return ((int)(this[this.tableУчасток.Расстояние_до_фундамента_домаColumn]));
                }
                set {
                    this[this.tableУчасток.Расстояние_до_фундамента_домаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int Расстояние_от_ограждений {
                get {
                    return ((int)(this[this.tableУчасток.Расстояние_от_огражденийColumn]));
                }
                set {
                    this[this.tableУчасток.Расстояние_от_огражденийColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int Расстояние_от_ствола_дерева {
                get {
                    return ((int)(this[this.tableУчасток.Расстояние_от_ствола_дереваColumn]));
                }
                set {
                    this[this.tableУчасток.Расстояние_от_ствола_дереваColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int Расстояние_от_других_инженерных_сетей {
                get {
                    return ((int)(this[this.tableУчасток.Расстояние_от_других_инженерных_сетейColumn]));
                }
                set {
                    this[this.tableУчасток.Расстояние_от_других_инженерных_сетейColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int Расстояние_водопроводных_колодцев_от_фундамента_дома {
                get {
                    return ((int)(this[this.tableУчасток.Расстояние_водопроводных_колодцев_от_фундамента_домаColumn]));
                }
                set {
                    this[this.tableУчасток.Расстояние_водопроводных_колодцев_от_фундамента_домаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Тип_канализации {
                get {
                    return ((string)(this[this.tableУчасток.Тип_канализацииColumn]));
                }
                set {
                    this[this.tableУчасток.Тип_канализацииColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int Диаметры_труб {
                get {
                    return ((int)(this[this.tableУчасток.Диаметры_трубColumn]));
                }
                set {
                    this[this.tableУчасток.Диаметры_трубColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int Минимальная_глубина_заложения_лотка_трубопровода {
                get {
                    return ((int)(this[this.tableУчасток.Минимальная_глубина_заложения_лотка_трубопроводаColumn]));
                }
                set {
                    this[this.tableУчасток.Минимальная_глубина_заложения_лотка_трубопроводаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Смотровые_колодцы {
                get {
                    try {
                        return ((string)(this[this.tableУчасток.Смотровые_колодцыColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'Смотровые колодцы\' в таблице \'Участок\' равно DBNull.", e);
                    }
                }
                set {
                    this[this.tableУчасток.Смотровые_колодцыColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int Расстояние_до_дороги {
                get {
                    try {
                        return ((int)(this[this.tableУчасток.Расстояние_до_дорогиColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'Расстояние до дороги\' в таблице \'Участок\' равно DBNull.", e);
                    }
                }
                set {
                    this[this.tableУчасток.Расстояние_до_дорогиColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int Расстояние_от_источника_питьевой_воды {
                get {
                    try {
                        return ((int)(this[this.tableУчасток.Расстояние_от_источника_питьевой_водыColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'Расстояние от источника питьевой воды\' в таблице \'Участок\' " +
                                "равно DBNull.", e);
                    }
                }
                set {
                    this[this.tableУчасток.Расстояние_от_источника_питьевой_водыColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int Расстояние_от_деревьев {
                get {
                    try {
                        return ((int)(this[this.tableУчасток.Расстояние_от_деревьевColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'Расстояние от деревьев\' в таблице \'Участок\' равно DBNull.", e);
                    }
                }
                set {
                    this[this.tableУчасток.Расстояние_от_деревьевColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ПользовательRow ПользовательRow {
                get {
                    return ((ПользовательRow)(this.GetParentRow(this.Table.ParentRelations["FK_Участок_Пользователь"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Участок_Пользователь"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsСмотровые_колодцыNull() {
                return this.IsNull(this.tableУчасток.Смотровые_колодцыColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetСмотровые_колодцыNull() {
                this[this.tableУчасток.Смотровые_колодцыColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsРасстояние_до_дорогиNull() {
                return this.IsNull(this.tableУчасток.Расстояние_до_дорогиColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetРасстояние_до_дорогиNull() {
                this[this.tableУчасток.Расстояние_до_дорогиColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsРасстояние_от_источника_питьевой_водыNull() {
                return this.IsNull(this.tableУчасток.Расстояние_от_источника_питьевой_водыColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetРасстояние_от_источника_питьевой_водыNull() {
                this[this.tableУчасток.Расстояние_от_источника_питьевой_водыColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsРасстояние_от_деревьевNull() {
                return this.IsNull(this.tableУчасток.Расстояние_от_деревьевColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetРасстояние_от_деревьевNull() {
                this[this.tableУчасток.Расстояние_от_деревьевColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public class ДомRowChangeEvent : global::System.EventArgs {
            
            private ДомRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ДомRowChangeEvent(ДомRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ДомRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public class Населённый_пунктRowChangeEvent : global::System.EventArgs {
            
            private Населённый_пунктRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public Населённый_пунктRowChangeEvent(Населённый_пунктRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public Населённый_пунктRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public class ПользовательRowChangeEvent : global::System.EventArgs {
            
            private ПользовательRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ПользовательRowChangeEvent(ПользовательRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public ПользовательRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public class Проекты_домовRowChangeEvent : global::System.EventArgs {
            
            private Проекты_домовRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public Проекты_домовRowChangeEvent(Проекты_домовRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public Проекты_домовRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public class Стоимость_постройки_домаRowChangeEvent : global::System.EventArgs {
            
            private Стоимость_постройки_домаRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public Стоимость_постройки_домаRowChangeEvent(Стоимость_постройки_домаRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public Стоимость_постройки_домаRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public class УчастокRowChangeEvent : global::System.EventArgs {
            
            private УчастокRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public УчастокRowChangeEvent(УчастокRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public УчастокRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace Diplomnaya.DiplommDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ДомTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public ДомTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Дом";
            tableMapping.ColumnMappings.Add("id", "id");
            tableMapping.ColumnMappings.Add("Проект дома", "Проект дома");
            tableMapping.ColumnMappings.Add("Площадь дома", "Площадь дома");
            tableMapping.ColumnMappings.Add("Количество этажей", "Количество этажей");
            tableMapping.ColumnMappings.Add("Адрес дома", "Адрес дома");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Дом] WHERE (([id] = @Original_id) AND ([Проект дома] = @Origin" +
                "al_Проект_дома) AND ([Площадь дома] = @Original_Площадь_дома) AND ([Количество э" +
                "тажей] = @Original_Количество_этажей) AND ([Адрес дома] = @Original_Адрес_дома))" +
                "";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Проект_дома", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Проект дома", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Площадь_дома", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Площадь дома", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Количество_этажей", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество этажей", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Адрес_дома", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Адрес дома", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Дом] ([id], [Проект дома], [Площадь дома], [Количество этажей], [Адрес дома]) VALUES (@id, @Проект_дома, @Площадь_дома, @Количество_этажей, @Адрес_дома);
SELECT id, [Проект дома], [Площадь дома], [Количество этажей], [Адрес дома] FROM Дом WHERE (id = @id)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Проект_дома", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Проект дома", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Площадь_дома", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Площадь дома", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Количество_этажей", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество этажей", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Адрес_дома", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Адрес дома", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Дом] SET [id] = @id, [Проект дома] = @Проект_дома, [Площадь дома] = @Площадь_дома, [Количество этажей] = @Количество_этажей, [Адрес дома] = @Адрес_дома WHERE (([id] = @Original_id) AND ([Проект дома] = @Original_Проект_дома) AND ([Площадь дома] = @Original_Площадь_дома) AND ([Количество этажей] = @Original_Количество_этажей) AND ([Адрес дома] = @Original_Адрес_дома));
SELECT id, [Проект дома], [Площадь дома], [Количество этажей], [Адрес дома] FROM Дом WHERE (id = @id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Проект_дома", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Проект дома", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Площадь_дома", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Площадь дома", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Количество_этажей", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество этажей", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Адрес_дома", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Адрес дома", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Проект_дома", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Проект дома", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Площадь_дома", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Площадь дома", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Количество_этажей", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество этажей", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Адрес_дома", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Адрес дома", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Diplomnaya.Properties.Settings.Default.DiplommConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT id, [Проект дома], [Площадь дома], [Количество этажей], [Адрес дома] FROM " +
                "dbo.Дом";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DiplommDataSet.ДомDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DiplommDataSet.ДомDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DiplommDataSet.ДомDataTable dataTable = new DiplommDataSet.ДомDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DiplommDataSet.ДомDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DiplommDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Дом");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_id, int Original_Проект_дома, string Original_Площадь_дома, int Original_Количество_этажей, string Original_Адрес_дома) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_Проект_дома));
            if ((Original_Площадь_дома == null)) {
                throw new global::System.ArgumentNullException("Original_Площадь_дома");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Площадь_дома));
            }
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_Количество_этажей));
            if ((Original_Адрес_дома == null)) {
                throw new global::System.ArgumentNullException("Original_Адрес_дома");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_Адрес_дома));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int id, int Проект_дома, string Площадь_дома, int Количество_этажей, string Адрес_дома) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(id));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(Проект_дома));
            if ((Площадь_дома == null)) {
                throw new global::System.ArgumentNullException("Площадь_дома");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Площадь_дома));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(Количество_этажей));
            if ((Адрес_дома == null)) {
                throw new global::System.ArgumentNullException("Адрес_дома");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(Адрес_дома));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int id, int Проект_дома, string Площадь_дома, int Количество_этажей, string Адрес_дома, int Original_id, int Original_Проект_дома, string Original_Площадь_дома, int Original_Количество_этажей, string Original_Адрес_дома) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(id));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(Проект_дома));
            if ((Площадь_дома == null)) {
                throw new global::System.ArgumentNullException("Площадь_дома");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Площадь_дома));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Количество_этажей));
            if ((Адрес_дома == null)) {
                throw new global::System.ArgumentNullException("Адрес_дома");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Адрес_дома));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_id));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_Проект_дома));
            if ((Original_Площадь_дома == null)) {
                throw new global::System.ArgumentNullException("Original_Площадь_дома");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_Площадь_дома));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_Количество_этажей));
            if ((Original_Адрес_дома == null)) {
                throw new global::System.ArgumentNullException("Original_Адрес_дома");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_Адрес_дома));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int Проект_дома, string Площадь_дома, int Количество_этажей, string Адрес_дома, int Original_id, int Original_Проект_дома, string Original_Площадь_дома, int Original_Количество_этажей, string Original_Адрес_дома) {
            return this.Update(Original_id, Проект_дома, Площадь_дома, Количество_этажей, Адрес_дома, Original_id, Original_Проект_дома, Original_Площадь_дома, Original_Количество_этажей, Original_Адрес_дома);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Населённый_пунктTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public Населённый_пунктTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Населённый пункт";
            tableMapping.ColumnMappings.Add("id", "id");
            tableMapping.ColumnMappings.Add("Название населенного пункта", "Название населенного пункта");
            tableMapping.ColumnMappings.Add("Комуникации в населенном пункте", "Комуникации в населенном пункте");
            tableMapping.ColumnMappings.Add("Количество  выкупленнных участков", "Количество  выкупленнных участков");
            tableMapping.ColumnMappings.Add("Количество участков в продаже", "Количество участков в продаже");
            tableMapping.ColumnMappings.Add("Количество строющихся домов", "Количество строющихся домов");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Населённый пункт] WHERE (([id] = @Original_id) AND ([Название населенного пункта] = @Original_Название_населенного_пункта) AND ([Комуникации в населенном пункте] = @Original_Комуникации_в_населенном_пункте) AND ((@IsNull_Количество__выкупленнных_участков = 1 AND [Количество  выкупленнных участков] IS NULL) OR ([Количество  выкупленнных участков] = @Original_Количество__выкупленнных_участков)) AND ((@IsNull_Количество_участков_в_продаже = 1 AND [Количество участков в продаже] IS NULL) OR ([Количество участков в продаже] = @Original_Количество_участков_в_продаже)) AND ((@IsNull_Количество_строющихся_домов = 1 AND [Количество строющихся домов] IS NULL) OR ([Количество строющихся домов] = @Original_Количество_строющихся_домов)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Название_населенного_пункта", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Название населенного пункта", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Комуникации_в_населенном_пункте", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Комуникации в населенном пункте", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Количество__выкупленнных_участков", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество  выкупленнных участков", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Количество__выкупленнных_участков", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество  выкупленнных участков", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Количество_участков_в_продаже", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество участков в продаже", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Количество_участков_в_продаже", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество участков в продаже", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Количество_строющихся_домов", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество строющихся домов", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Количество_строющихся_домов", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество строющихся домов", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Населённый пункт] ([id], [Название населенного пункта], [Комуникации в населенном пункте], [Количество  выкупленнных участков], [Количество участков в продаже], [Количество строющихся домов]) VALUES (@id, @Название_населенного_пункта, @Комуникации_в_населенном_пункте, @Количество__выкупленнных_участков, @Количество_участков_в_продаже, @Количество_строющихся_домов);
SELECT id, [Название населенного пункта], [Комуникации в населенном пункте], [Количество  выкупленнных участков], [Количество участков в продаже], [Количество строющихся домов] FROM [Населённый пункт] WHERE (id = @id)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Название_населенного_пункта", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Название населенного пункта", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Комуникации_в_населенном_пункте", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Комуникации в населенном пункте", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Количество__выкупленнных_участков", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество  выкупленнных участков", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Количество_участков_в_продаже", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество участков в продаже", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Количество_строющихся_домов", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество строющихся домов", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Населённый пункт] SET [id] = @id, [Название населенного пункта] = @Название_населенного_пункта, [Комуникации в населенном пункте] = @Комуникации_в_населенном_пункте, [Количество  выкупленнных участков] = @Количество__выкупленнных_участков, [Количество участков в продаже] = @Количество_участков_в_продаже, [Количество строющихся домов] = @Количество_строющихся_домов WHERE (([id] = @Original_id) AND ([Название населенного пункта] = @Original_Название_населенного_пункта) AND ([Комуникации в населенном пункте] = @Original_Комуникации_в_населенном_пункте) AND ((@IsNull_Количество__выкупленнных_участков = 1 AND [Количество  выкупленнных участков] IS NULL) OR ([Количество  выкупленнных участков] = @Original_Количество__выкупленнных_участков)) AND ((@IsNull_Количество_участков_в_продаже = 1 AND [Количество участков в продаже] IS NULL) OR ([Количество участков в продаже] = @Original_Количество_участков_в_продаже)) AND ((@IsNull_Количество_строющихся_домов = 1 AND [Количество строющихся домов] IS NULL) OR ([Количество строющихся домов] = @Original_Количество_строющихся_домов)));
SELECT id, [Название населенного пункта], [Комуникации в населенном пункте], [Количество  выкупленнных участков], [Количество участков в продаже], [Количество строющихся домов] FROM [Населённый пункт] WHERE (id = @id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Название_населенного_пункта", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Название населенного пункта", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Комуникации_в_населенном_пункте", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Комуникации в населенном пункте", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Количество__выкупленнных_участков", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество  выкупленнных участков", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Количество_участков_в_продаже", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество участков в продаже", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Количество_строющихся_домов", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество строющихся домов", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Название_населенного_пункта", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Название населенного пункта", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Комуникации_в_населенном_пункте", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Комуникации в населенном пункте", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Количество__выкупленнных_участков", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество  выкупленнных участков", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Количество__выкупленнных_участков", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество  выкупленнных участков", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Количество_участков_в_продаже", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество участков в продаже", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Количество_участков_в_продаже", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество участков в продаже", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Количество_строющихся_домов", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество строющихся домов", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Количество_строющихся_домов", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество строющихся домов", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Diplomnaya.Properties.Settings.Default.DiplommConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT id, [Название населенного пункта], [Комуникации в населенном пункте], [Кол" +
                "ичество  выкупленнных участков], [Количество участков в продаже], [Количество ст" +
                "роющихся домов] FROM dbo.[Населённый пункт]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DiplommDataSet.Населённый_пунктDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DiplommDataSet.Населённый_пунктDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DiplommDataSet.Населённый_пунктDataTable dataTable = new DiplommDataSet.Населённый_пунктDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DiplommDataSet.Населённый_пунктDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DiplommDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Населённый пункт");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_id, string Original_Название_населенного_пункта, string Original_Комуникации_в_населенном_пункте, global::System.Nullable<int> Original_Количество__выкупленнных_участков, global::System.Nullable<int> Original_Количество_участков_в_продаже, global::System.Nullable<int> Original_Количество_строющихся_домов) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_id));
            if ((Original_Название_населенного_пункта == null)) {
                throw new global::System.ArgumentNullException("Original_Название_населенного_пункта");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Название_населенного_пункта));
            }
            if ((Original_Комуникации_в_населенном_пункте == null)) {
                throw new global::System.ArgumentNullException("Original_Комуникации_в_населенном_пункте");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Комуникации_в_населенном_пункте));
            }
            if ((Original_Количество__выкупленнных_участков.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_Количество__выкупленнных_участков.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_Количество_участков_в_продаже.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((int)(Original_Количество_участков_в_продаже.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_Количество_строющихся_домов.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_Количество_строющихся_домов.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int id, string Название_населенного_пункта, string Комуникации_в_населенном_пункте, global::System.Nullable<int> Количество__выкупленнных_участков, global::System.Nullable<int> Количество_участков_в_продаже, global::System.Nullable<int> Количество_строющихся_домов) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(id));
            if ((Название_населенного_пункта == null)) {
                throw new global::System.ArgumentNullException("Название_населенного_пункта");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Название_населенного_пункта));
            }
            if ((Комуникации_в_населенном_пункте == null)) {
                throw new global::System.ArgumentNullException("Комуникации_в_населенном_пункте");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Комуникации_в_населенном_пункте));
            }
            if ((Количество__выкупленнных_участков.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((int)(Количество__выкупленнных_участков.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((Количество_участков_в_продаже.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((int)(Количество_участков_в_продаже.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Количество_строющихся_домов.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((int)(Количество_строющихся_домов.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int id, string Название_населенного_пункта, string Комуникации_в_населенном_пункте, global::System.Nullable<int> Количество__выкупленнных_участков, global::System.Nullable<int> Количество_участков_в_продаже, global::System.Nullable<int> Количество_строющихся_домов, int Original_id, string Original_Название_населенного_пункта, string Original_Комуникации_в_населенном_пункте, global::System.Nullable<int> Original_Количество__выкупленнных_участков, global::System.Nullable<int> Original_Количество_участков_в_продаже, global::System.Nullable<int> Original_Количество_строющихся_домов) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(id));
            if ((Название_населенного_пункта == null)) {
                throw new global::System.ArgumentNullException("Название_населенного_пункта");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Название_населенного_пункта));
            }
            if ((Комуникации_в_населенном_пункте == null)) {
                throw new global::System.ArgumentNullException("Комуникации_в_населенном_пункте");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Комуникации_в_населенном_пункте));
            }
            if ((Количество__выкупленнных_участков.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Количество__выкупленнных_участков.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((Количество_участков_в_продаже.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Количество_участков_в_продаже.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Количество_строющихся_домов.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Количество_строющихся_домов.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_id));
            if ((Original_Название_населенного_пункта == null)) {
                throw new global::System.ArgumentNullException("Original_Название_населенного_пункта");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_Название_населенного_пункта));
            }
            if ((Original_Комуникации_в_населенном_пункте == null)) {
                throw new global::System.ArgumentNullException("Original_Комуникации_в_населенном_пункте");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_Комуникации_в_населенном_пункте));
            }
            if ((Original_Количество__выкупленнных_участков.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_Количество__выкупленнных_участков.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Original_Количество_участков_в_продаже.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_Количество_участков_в_продаже.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_Количество_строющихся_домов.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(Original_Количество_строющихся_домов.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Название_населенного_пункта, string Комуникации_в_населенном_пункте, global::System.Nullable<int> Количество__выкупленнных_участков, global::System.Nullable<int> Количество_участков_в_продаже, global::System.Nullable<int> Количество_строющихся_домов, int Original_id, string Original_Название_населенного_пункта, string Original_Комуникации_в_населенном_пункте, global::System.Nullable<int> Original_Количество__выкупленнных_участков, global::System.Nullable<int> Original_Количество_участков_в_продаже, global::System.Nullable<int> Original_Количество_строющихся_домов) {
            return this.Update(Original_id, Название_населенного_пункта, Комуникации_в_населенном_пункте, Количество__выкупленнных_участков, Количество_участков_в_продаже, Количество_строющихся_домов, Original_id, Original_Название_населенного_пункта, Original_Комуникации_в_населенном_пункте, Original_Количество__выкупленнных_участков, Original_Количество_участков_в_продаже, Original_Количество_строющихся_домов);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ПользовательTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public ПользовательTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Пользователь";
            tableMapping.ColumnMappings.Add("id", "id");
            tableMapping.ColumnMappings.Add("Логин", "Логин");
            tableMapping.ColumnMappings.Add("Пароль", "Пароль");
            tableMapping.ColumnMappings.Add("Доступ", "Доступ");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Пользователь] WHERE (([id] = @Original_id) AND ([Логин] = @Ori" +
                "ginal_Логин) AND ([Пароль] = @Original_Пароль) AND ([Доступ] = @Original_Доступ)" +
                ")";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Логин", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Логин", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Пароль", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Пароль", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Доступ", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Доступ", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Пользователь] ([Логин], [Пароль], [Доступ]) VALUES (@Логин, @П" +
                "ароль, @Доступ);\r\nSELECT id, Логин, Пароль, Доступ FROM Пользователь WHERE (id =" +
                " SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Логин", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Логин", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Пароль", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Пароль", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Доступ", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Доступ", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Пользователь] SET [Логин] = @Логин, [Пароль] = @Пароль, [Доступ] = @Доступ WHERE (([id] = @Original_id) AND ([Логин] = @Original_Логин) AND ([Пароль] = @Original_Пароль) AND ([Доступ] = @Original_Доступ));
SELECT id, Логин, Пароль, Доступ FROM Пользователь WHERE (id = @id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Логин", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Логин", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Пароль", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Пароль", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Доступ", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Доступ", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Логин", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Логин", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Пароль", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Пароль", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Доступ", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Доступ", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Diplomnaya.Properties.Settings.Default.DiplommConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT id, Логин, Пароль, Доступ FROM dbo.Пользователь";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DiplommDataSet.ПользовательDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DiplommDataSet.ПользовательDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DiplommDataSet.ПользовательDataTable dataTable = new DiplommDataSet.ПользовательDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DiplommDataSet.ПользовательDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DiplommDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Пользователь");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_id, string Original_Логин, string Original_Пароль, int Original_Доступ) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_id));
            if ((Original_Логин == null)) {
                throw new global::System.ArgumentNullException("Original_Логин");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Логин));
            }
            if ((Original_Пароль == null)) {
                throw new global::System.ArgumentNullException("Original_Пароль");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Пароль));
            }
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_Доступ));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Логин, string Пароль, int Доступ) {
            if ((Логин == null)) {
                throw new global::System.ArgumentNullException("Логин");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Логин));
            }
            if ((Пароль == null)) {
                throw new global::System.ArgumentNullException("Пароль");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Пароль));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(Доступ));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Логин, string Пароль, int Доступ, int Original_id, string Original_Логин, string Original_Пароль, int Original_Доступ, int id) {
            if ((Логин == null)) {
                throw new global::System.ArgumentNullException("Логин");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Логин));
            }
            if ((Пароль == null)) {
                throw new global::System.ArgumentNullException("Пароль");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Пароль));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Доступ));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_id));
            if ((Original_Логин == null)) {
                throw new global::System.ArgumentNullException("Original_Логин");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_Логин));
            }
            if ((Original_Пароль == null)) {
                throw new global::System.ArgumentNullException("Original_Пароль");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_Пароль));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_Доступ));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Логин, string Пароль, int Доступ, int Original_id, string Original_Логин, string Original_Пароль, int Original_Доступ) {
            return this.Update(Логин, Пароль, Доступ, Original_id, Original_Логин, Original_Пароль, Original_Доступ, Original_id);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Проекты_домовTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public Проекты_домовTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Проекты домов";
            tableMapping.ColumnMappings.Add("Номер проекта дома", "Номер проекта дома");
            tableMapping.ColumnMappings.Add("Стоимость материалов", "Стоимость материалов");
            tableMapping.ColumnMappings.Add("Стоимость строительных работ", "Стоимость строительных работ");
            tableMapping.ColumnMappings.Add("Размер участка", "Размер участка");
            tableMapping.ColumnMappings.Add("Площадь дома", "Площадь дома");
            tableMapping.ColumnMappings.Add("Количество этажей", "Количество этажей");
            tableMapping.ColumnMappings.Add("Тип фундамента", "Тип фундамента");
            tableMapping.ColumnMappings.Add("Материалы стен", "Материалы стен");
            tableMapping.ColumnMappings.Add("Толщина стен", "Толщина стен");
            tableMapping.ColumnMappings.Add("Перегородка мансардного этажа", "Перегородка мансардного этажа");
            tableMapping.ColumnMappings.Add("Материалы полов", "Материалы полов");
            tableMapping.ColumnMappings.Add("Материалы потолков", "Материалы потолков");
            tableMapping.ColumnMappings.Add("Оконные рамы", "Оконные рамы");
            tableMapping.ColumnMappings.Add("Типы дверей", "Типы дверей");
            tableMapping.ColumnMappings.Add("Материалы кровли", "Материалы кровли");
            tableMapping.ColumnMappings.Add("Вид отопления", "Вид отопления");
            tableMapping.ColumnMappings.Add("Тип канализации", "Тип канализации");
            tableMapping.ColumnMappings.Add("Количество комнат", "Количество комнат");
            tableMapping.ColumnMappings.Add("Прочность и долговечность", "Прочность и долговечность");
            tableMapping.ColumnMappings.Add("Энергетическая эффективность", "Энергетическая эффективность");
            tableMapping.ColumnMappings.Add("Санузел", "Санузел");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Проекты домов] WHERE (([Номер проекта дома] = @Original_Номер_проекта_дома) AND ([Стоимость материалов] = @Original_Стоимость_материалов) AND ([Стоимость строительных работ] = @Original_Стоимость_строительных_работ) AND ([Размер участка] = @Original_Размер_участка) AND ([Площадь дома] = @Original_Площадь_дома) AND ([Количество этажей] = @Original_Количество_этажей) AND ([Тип фундамента] = @Original_Тип_фундамента) AND ([Материалы стен] = @Original_Материалы_стен) AND ([Толщина стен] = @Original_Толщина_стен) AND ([Перегородка мансардного этажа] = @Original_Перегородка_мансардного_этажа) AND ([Материалы полов] = @Original_Материалы_полов) AND ([Материалы потолков] = @Original_Материалы_потолков) AND ([Оконные рамы] = @Original_Оконные_рамы) AND ([Типы дверей] = @Original_Типы_дверей) AND ([Материалы кровли] = @Original_Материалы_кровли) AND ([Вид отопления] = @Original_Вид_отопления) AND ([Тип канализации] = @Original_Тип_канализации) AND ([Количество комнат] = @Original_Количество_комнат) AND ([Прочность и долговечность] = @Original_Прочность_и_долговечность) AND ([Энергетическая эффективность] = @Original_Энергетическая_эффективность) AND ([Санузел] = @Original_Санузел))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Номер_проекта_дома", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Номер проекта дома", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Стоимость_материалов", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Стоимость материалов", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Стоимость_строительных_работ", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Стоимость строительных работ", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Размер_участка", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Размер участка", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Площадь_дома", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Площадь дома", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Количество_этажей", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество этажей", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Тип_фундамента", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Тип фундамента", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Материалы_стен", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Материалы стен", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Толщина_стен", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Толщина стен", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Перегородка_мансардного_этажа", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Перегородка мансардного этажа", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Материалы_полов", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Материалы полов", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Материалы_потолков", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Материалы потолков", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Оконные_рамы", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Оконные рамы", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Типы_дверей", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Типы дверей", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Материалы_кровли", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Материалы кровли", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Вид_отопления", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Вид отопления", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Тип_канализации", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Тип канализации", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Количество_комнат", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество комнат", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Прочность_и_долговечность", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Прочность и долговечность", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Энергетическая_эффективность", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Энергетическая эффективность", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Санузел", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Санузел", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Проекты домов] ([Номер проекта дома], [Стоимость материалов], [Стоимость строительных работ], [Размер участка], [Площадь дома], [Количество этажей], [Тип фундамента], [Материалы стен], [Толщина стен], [Перегородка мансардного этажа], [Материалы полов], [Материалы потолков], [Оконные рамы], [Типы дверей], [Материалы кровли], [Вид отопления], [Тип канализации], [Количество комнат], [Прочность и долговечность], [Энергетическая эффективность], [Санузел]) VALUES (@Номер_проекта_дома, @Стоимость_материалов, @Стоимость_строительных_работ, @Размер_участка, @Площадь_дома, @Количество_этажей, @Тип_фундамента, @Материалы_стен, @Толщина_стен, @Перегородка_мансардного_этажа, @Материалы_полов, @Материалы_потолков, @Оконные_рамы, @Типы_дверей, @Материалы_кровли, @Вид_отопления, @Тип_канализации, @Количество_комнат, @Прочность_и_долговечность, @Энергетическая_эффективность, @Санузел);
SELECT [Номер проекта дома], [Стоимость материалов], [Стоимость строительных работ], [Размер участка], [Площадь дома], [Количество этажей], [Тип фундамента], [Материалы стен], [Толщина стен], [Перегородка мансардного этажа], [Материалы полов], [Материалы потолков], [Оконные рамы], [Типы дверей], [Материалы кровли], [Вид отопления], [Тип канализации], [Количество комнат], [Прочность и долговечность], [Энергетическая эффективность], Санузел FROM [Проекты домов] WHERE ([Номер проекта дома] = @Номер_проекта_дома)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Номер_проекта_дома", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Номер проекта дома", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Стоимость_материалов", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Стоимость материалов", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Стоимость_строительных_работ", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Стоимость строительных работ", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Размер_участка", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Размер участка", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Площадь_дома", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Площадь дома", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Количество_этажей", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество этажей", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Тип_фундамента", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Тип фундамента", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Материалы_стен", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Материалы стен", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Толщина_стен", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Толщина стен", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Перегородка_мансардного_этажа", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Перегородка мансардного этажа", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Материалы_полов", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Материалы полов", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Материалы_потолков", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Материалы потолков", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Оконные_рамы", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Оконные рамы", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Типы_дверей", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Типы дверей", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Материалы_кровли", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Материалы кровли", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Вид_отопления", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Вид отопления", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Тип_канализации", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Тип канализации", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Количество_комнат", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество комнат", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Прочность_и_долговечность", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Прочность и долговечность", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Энергетическая_эффективность", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Энергетическая эффективность", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Санузел", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Санузел", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Проекты домов] SET [Номер проекта дома] = @Номер_проекта_дома, [Сто" +
                "имость материалов] = @Стоимость_материалов, [Стоимость строительных работ] = @Ст" +
                "оимость_строительных_работ, [Размер участка] = @Размер_участка, [Площадь дома] =" +
                " @Площадь_дома, [Количество этажей] = @Количество_этажей, [Тип фундамента] = @Ти" +
                "п_фундамента, [Материалы стен] = @Материалы_стен, [Толщина стен] = @Толщина_стен" +
                ", [Перегородка мансардного этажа] = @Перегородка_мансардного_этажа, [Материалы п" +
                "олов] = @Материалы_полов, [Материалы потолков] = @Материалы_потолков, [Оконные р" +
                "амы] = @Оконные_рамы, [Типы дверей] = @Типы_дверей, [Материалы кровли] = @Матери" +
                "алы_кровли, [Вид отопления] = @Вид_отопления, [Тип канализации] = @Тип_канализац" +
                "ии, [Количество комнат] = @Количество_комнат, [Прочность и долговечность] = @Про" +
                "чность_и_долговечность, [Энергетическая эффективность] = @Энергетическая_эффекти" +
                "вность, [Санузел] = @Санузел WHERE (([Номер проекта дома] = @Original_Номер_прое" +
                "кта_дома) AND ([Стоимость материалов] = @Original_Стоимость_материалов) AND ([Ст" +
                "оимость строительных работ] = @Original_Стоимость_строительных_работ) AND ([Разм" +
                "ер участка] = @Original_Размер_участка) AND ([Площадь дома] = @Original_Площадь_" +
                "дома) AND ([Количество этажей] = @Original_Количество_этажей) AND ([Тип фундамен" +
                "та] = @Original_Тип_фундамента) AND ([Материалы стен] = @Original_Материалы_стен" +
                ") AND ([Толщина стен] = @Original_Толщина_стен) AND ([Перегородка мансардного эт" +
                "ажа] = @Original_Перегородка_мансардного_этажа) AND ([Материалы полов] = @Origin" +
                "al_Материалы_полов) AND ([Материалы потолков] = @Original_Материалы_потолков) AN" +
                "D ([Оконные рамы] = @Original_Оконные_рамы) AND ([Типы дверей] = @Original_Типы_" +
                "дверей) AND ([Материалы кровли] = @Original_Материалы_кровли) AND ([Вид отоплени" +
                "я] = @Original_Вид_отопления) AND ([Тип канализации] = @Original_Тип_канализации" +
                ") AND ([Количество комнат] = @Original_Количество_комнат) AND ([Прочность и долг" +
                "овечность] = @Original_Прочность_и_долговечность) AND ([Энергетическая эффективн" +
                "ость] = @Original_Энергетическая_эффективность) AND ([Санузел] = @Original_Сануз" +
                "ел));\r\nSELECT [Номер проекта дома], [Стоимость материалов], [Стоимость строитель" +
                "ных работ], [Размер участка], [Площадь дома], [Количество этажей], [Тип фундамен" +
                "та], [Материалы стен], [Толщина стен], [Перегородка мансардного этажа], [Материа" +
                "лы полов], [Материалы потолков], [Оконные рамы], [Типы дверей], [Материалы кровл" +
                "и], [Вид отопления], [Тип канализации], [Количество комнат], [Прочность и долгов" +
                "ечность], [Энергетическая эффективность], Санузел FROM [Проекты домов] WHERE ([Н" +
                "омер проекта дома] = @Номер_проекта_дома)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Номер_проекта_дома", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Номер проекта дома", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Стоимость_материалов", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Стоимость материалов", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Стоимость_строительных_работ", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Стоимость строительных работ", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Размер_участка", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Размер участка", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Площадь_дома", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Площадь дома", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Количество_этажей", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество этажей", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Тип_фундамента", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Тип фундамента", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Материалы_стен", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Материалы стен", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Толщина_стен", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Толщина стен", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Перегородка_мансардного_этажа", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Перегородка мансардного этажа", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Материалы_полов", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Материалы полов", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Материалы_потолков", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Материалы потолков", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Оконные_рамы", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Оконные рамы", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Типы_дверей", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Типы дверей", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Материалы_кровли", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Материалы кровли", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Вид_отопления", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Вид отопления", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Тип_канализации", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Тип канализации", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Количество_комнат", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество комнат", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Прочность_и_долговечность", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Прочность и долговечность", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Энергетическая_эффективность", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Энергетическая эффективность", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Санузел", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Санузел", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Номер_проекта_дома", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Номер проекта дома", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Стоимость_материалов", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Стоимость материалов", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Стоимость_строительных_работ", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Стоимость строительных работ", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Размер_участка", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Размер участка", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Площадь_дома", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Площадь дома", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Количество_этажей", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество этажей", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Тип_фундамента", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Тип фундамента", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Материалы_стен", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Материалы стен", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Толщина_стен", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Толщина стен", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Перегородка_мансардного_этажа", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Перегородка мансардного этажа", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Материалы_полов", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Материалы полов", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Материалы_потолков", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Материалы потолков", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Оконные_рамы", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Оконные рамы", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Типы_дверей", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Типы дверей", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Материалы_кровли", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Материалы кровли", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Вид_отопления", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Вид отопления", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Тип_канализации", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Тип канализации", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Количество_комнат", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Количество комнат", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Прочность_и_долговечность", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Прочность и долговечность", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Энергетическая_эффективность", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Энергетическая эффективность", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Санузел", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Санузел", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Diplomnaya.Properties.Settings.Default.DiplommConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT [Номер проекта дома], [Стоимость материалов], [Стоимость строительных работ], [Размер участка], [Площадь дома], [Количество этажей], [Тип фундамента], [Материалы стен], [Толщина стен], [Перегородка мансардного этажа], [Материалы полов], [Материалы потолков], [Оконные рамы], [Типы дверей], [Материалы кровли], [Вид отопления], [Тип канализации], [Количество комнат], [Прочность и долговечность], [Энергетическая эффективность], Санузел FROM dbo.[Проекты домов]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DiplommDataSet.Проекты_домовDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DiplommDataSet.Проекты_домовDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DiplommDataSet.Проекты_домовDataTable dataTable = new DiplommDataSet.Проекты_домовDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DiplommDataSet.Проекты_домовDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DiplommDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Проекты домов");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    int Original_Номер_проекта_дома, 
                    decimal Original_Стоимость_материалов, 
                    decimal Original_Стоимость_строительных_работ, 
                    string Original_Размер_участка, 
                    int Original_Площадь_дома, 
                    int Original_Количество_этажей, 
                    string Original_Тип_фундамента, 
                    string Original_Материалы_стен, 
                    string Original_Толщина_стен, 
                    string Original_Перегородка_мансардного_этажа, 
                    string Original_Материалы_полов, 
                    string Original_Материалы_потолков, 
                    string Original_Оконные_рамы, 
                    string Original_Типы_дверей, 
                    string Original_Материалы_кровли, 
                    string Original_Вид_отопления, 
                    string Original_Тип_канализации, 
                    int Original_Количество_комнат, 
                    string Original_Прочность_и_долговечность, 
                    string Original_Энергетическая_эффективность, 
                    string Original_Санузел) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_Номер_проекта_дома));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((decimal)(Original_Стоимость_материалов));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((decimal)(Original_Стоимость_строительных_работ));
            if ((Original_Размер_участка == null)) {
                throw new global::System.ArgumentNullException("Original_Размер_участка");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_Размер_участка));
            }
            this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_Площадь_дома));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((int)(Original_Количество_этажей));
            if ((Original_Тип_фундамента == null)) {
                throw new global::System.ArgumentNullException("Original_Тип_фундамента");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_Тип_фундамента));
            }
            if ((Original_Материалы_стен == null)) {
                throw new global::System.ArgumentNullException("Original_Материалы_стен");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_Материалы_стен));
            }
            if ((Original_Толщина_стен == null)) {
                throw new global::System.ArgumentNullException("Original_Толщина_стен");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_Толщина_стен));
            }
            if ((Original_Перегородка_мансардного_этажа == null)) {
                throw new global::System.ArgumentNullException("Original_Перегородка_мансардного_этажа");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Original_Перегородка_мансардного_этажа));
            }
            if ((Original_Материалы_полов == null)) {
                throw new global::System.ArgumentNullException("Original_Материалы_полов");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_Материалы_полов));
            }
            if ((Original_Материалы_потолков == null)) {
                throw new global::System.ArgumentNullException("Original_Материалы_потолков");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Original_Материалы_потолков));
            }
            if ((Original_Оконные_рамы == null)) {
                throw new global::System.ArgumentNullException("Original_Оконные_рамы");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_Оконные_рамы));
            }
            if ((Original_Типы_дверей == null)) {
                throw new global::System.ArgumentNullException("Original_Типы_дверей");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((string)(Original_Типы_дверей));
            }
            if ((Original_Материалы_кровли == null)) {
                throw new global::System.ArgumentNullException("Original_Материалы_кровли");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_Материалы_кровли));
            }
            if ((Original_Вид_отопления == null)) {
                throw new global::System.ArgumentNullException("Original_Вид_отопления");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((string)(Original_Вид_отопления));
            }
            if ((Original_Тип_канализации == null)) {
                throw new global::System.ArgumentNullException("Original_Тип_канализации");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((string)(Original_Тип_канализации));
            }
            this.Adapter.DeleteCommand.Parameters[17].Value = ((int)(Original_Количество_комнат));
            if ((Original_Прочность_и_долговечность == null)) {
                throw new global::System.ArgumentNullException("Original_Прочность_и_долговечность");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[18].Value = ((string)(Original_Прочность_и_долговечность));
            }
            if ((Original_Энергетическая_эффективность == null)) {
                throw new global::System.ArgumentNullException("Original_Энергетическая_эффективность");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((string)(Original_Энергетическая_эффективность));
            }
            if ((Original_Санузел == null)) {
                throw new global::System.ArgumentNullException("Original_Санузел");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[20].Value = ((string)(Original_Санузел));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    int Номер_проекта_дома, 
                    decimal Стоимость_материалов, 
                    decimal Стоимость_строительных_работ, 
                    string Размер_участка, 
                    int Площадь_дома, 
                    int Количество_этажей, 
                    string Тип_фундамента, 
                    string Материалы_стен, 
                    string Толщина_стен, 
                    string Перегородка_мансардного_этажа, 
                    string Материалы_полов, 
                    string Материалы_потолков, 
                    string Оконные_рамы, 
                    string Типы_дверей, 
                    string Материалы_кровли, 
                    string Вид_отопления, 
                    string Тип_канализации, 
                    int Количество_комнат, 
                    string Прочность_и_долговечность, 
                    string Энергетическая_эффективность, 
                    string Санузел) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(Номер_проекта_дома));
            this.Adapter.InsertCommand.Parameters[1].Value = ((decimal)(Стоимость_материалов));
            this.Adapter.InsertCommand.Parameters[2].Value = ((decimal)(Стоимость_строительных_работ));
            if ((Размер_участка == null)) {
                throw new global::System.ArgumentNullException("Размер_участка");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Размер_участка));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((int)(Площадь_дома));
            this.Adapter.InsertCommand.Parameters[5].Value = ((int)(Количество_этажей));
            if ((Тип_фундамента == null)) {
                throw new global::System.ArgumentNullException("Тип_фундамента");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(Тип_фундамента));
            }
            if ((Материалы_стен == null)) {
                throw new global::System.ArgumentNullException("Материалы_стен");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(Материалы_стен));
            }
            if ((Толщина_стен == null)) {
                throw new global::System.ArgumentNullException("Толщина_стен");
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(Толщина_стен));
            }
            if ((Перегородка_мансардного_этажа == null)) {
                throw new global::System.ArgumentNullException("Перегородка_мансардного_этажа");
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(Перегородка_мансардного_этажа));
            }
            if ((Материалы_полов == null)) {
                throw new global::System.ArgumentNullException("Материалы_полов");
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(Материалы_полов));
            }
            if ((Материалы_потолков == null)) {
                throw new global::System.ArgumentNullException("Материалы_потолков");
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(Материалы_потолков));
            }
            if ((Оконные_рамы == null)) {
                throw new global::System.ArgumentNullException("Оконные_рамы");
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(Оконные_рамы));
            }
            if ((Типы_дверей == null)) {
                throw new global::System.ArgumentNullException("Типы_дверей");
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(Типы_дверей));
            }
            if ((Материалы_кровли == null)) {
                throw new global::System.ArgumentNullException("Материалы_кровли");
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(Материалы_кровли));
            }
            if ((Вид_отопления == null)) {
                throw new global::System.ArgumentNullException("Вид_отопления");
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(Вид_отопления));
            }
            if ((Тип_канализации == null)) {
                throw new global::System.ArgumentNullException("Тип_канализации");
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = ((string)(Тип_канализации));
            }
            this.Adapter.InsertCommand.Parameters[17].Value = ((int)(Количество_комнат));
            if ((Прочность_и_долговечность == null)) {
                throw new global::System.ArgumentNullException("Прочность_и_долговечность");
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = ((string)(Прочность_и_долговечность));
            }
            if ((Энергетическая_эффективность == null)) {
                throw new global::System.ArgumentNullException("Энергетическая_эффективность");
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = ((string)(Энергетическая_эффективность));
            }
            if ((Санузел == null)) {
                throw new global::System.ArgumentNullException("Санузел");
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = ((string)(Санузел));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int Номер_проекта_дома, 
                    decimal Стоимость_материалов, 
                    decimal Стоимость_строительных_работ, 
                    string Размер_участка, 
                    int Площадь_дома, 
                    int Количество_этажей, 
                    string Тип_фундамента, 
                    string Материалы_стен, 
                    string Толщина_стен, 
                    string Перегородка_мансардного_этажа, 
                    string Материалы_полов, 
                    string Материалы_потолков, 
                    string Оконные_рамы, 
                    string Типы_дверей, 
                    string Материалы_кровли, 
                    string Вид_отопления, 
                    string Тип_канализации, 
                    int Количество_комнат, 
                    string Прочность_и_долговечность, 
                    string Энергетическая_эффективность, 
                    string Санузел, 
                    int Original_Номер_проекта_дома, 
                    decimal Original_Стоимость_материалов, 
                    decimal Original_Стоимость_строительных_работ, 
                    string Original_Размер_участка, 
                    int Original_Площадь_дома, 
                    int Original_Количество_этажей, 
                    string Original_Тип_фундамента, 
                    string Original_Материалы_стен, 
                    string Original_Толщина_стен, 
                    string Original_Перегородка_мансардного_этажа, 
                    string Original_Материалы_полов, 
                    string Original_Материалы_потолков, 
                    string Original_Оконные_рамы, 
                    string Original_Типы_дверей, 
                    string Original_Материалы_кровли, 
                    string Original_Вид_отопления, 
                    string Original_Тип_канализации, 
                    int Original_Количество_комнат, 
                    string Original_Прочность_и_долговечность, 
                    string Original_Энергетическая_эффективность, 
                    string Original_Санузел) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(Номер_проекта_дома));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((decimal)(Стоимость_материалов));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((decimal)(Стоимость_строительных_работ));
            if ((Размер_участка == null)) {
                throw new global::System.ArgumentNullException("Размер_участка");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Размер_участка));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Площадь_дома));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Количество_этажей));
            if ((Тип_фундамента == null)) {
                throw new global::System.ArgumentNullException("Тип_фундамента");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Тип_фундамента));
            }
            if ((Материалы_стен == null)) {
                throw new global::System.ArgumentNullException("Материалы_стен");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Материалы_стен));
            }
            if ((Толщина_стен == null)) {
                throw new global::System.ArgumentNullException("Толщина_стен");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Толщина_стен));
            }
            if ((Перегородка_мансардного_этажа == null)) {
                throw new global::System.ArgumentNullException("Перегородка_мансардного_этажа");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Перегородка_мансардного_этажа));
            }
            if ((Материалы_полов == null)) {
                throw new global::System.ArgumentNullException("Материалы_полов");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Материалы_полов));
            }
            if ((Материалы_потолков == null)) {
                throw new global::System.ArgumentNullException("Материалы_потолков");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Материалы_потолков));
            }
            if ((Оконные_рамы == null)) {
                throw new global::System.ArgumentNullException("Оконные_рамы");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Оконные_рамы));
            }
            if ((Типы_дверей == null)) {
                throw new global::System.ArgumentNullException("Типы_дверей");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Типы_дверей));
            }
            if ((Материалы_кровли == null)) {
                throw new global::System.ArgumentNullException("Материалы_кровли");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Материалы_кровли));
            }
            if ((Вид_отопления == null)) {
                throw new global::System.ArgumentNullException("Вид_отопления");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Вид_отопления));
            }
            if ((Тип_канализации == null)) {
                throw new global::System.ArgumentNullException("Тип_канализации");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Тип_канализации));
            }
            this.Adapter.UpdateCommand.Parameters[17].Value = ((int)(Количество_комнат));
            if ((Прочность_и_долговечность == null)) {
                throw new global::System.ArgumentNullException("Прочность_и_долговечность");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Прочность_и_долговечность));
            }
            if ((Энергетическая_эффективность == null)) {
                throw new global::System.ArgumentNullException("Энергетическая_эффективность");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Энергетическая_эффективность));
            }
            if ((Санузел == null)) {
                throw new global::System.ArgumentNullException("Санузел");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Санузел));
            }
            this.Adapter.UpdateCommand.Parameters[21].Value = ((int)(Original_Номер_проекта_дома));
            this.Adapter.UpdateCommand.Parameters[22].Value = ((decimal)(Original_Стоимость_материалов));
            this.Adapter.UpdateCommand.Parameters[23].Value = ((decimal)(Original_Стоимость_строительных_работ));
            if ((Original_Размер_участка == null)) {
                throw new global::System.ArgumentNullException("Original_Размер_участка");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Original_Размер_участка));
            }
            this.Adapter.UpdateCommand.Parameters[25].Value = ((int)(Original_Площадь_дома));
            this.Adapter.UpdateCommand.Parameters[26].Value = ((int)(Original_Количество_этажей));
            if ((Original_Тип_фундамента == null)) {
                throw new global::System.ArgumentNullException("Original_Тип_фундамента");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((string)(Original_Тип_фундамента));
            }
            if ((Original_Материалы_стен == null)) {
                throw new global::System.ArgumentNullException("Original_Материалы_стен");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((string)(Original_Материалы_стен));
            }
            if ((Original_Толщина_стен == null)) {
                throw new global::System.ArgumentNullException("Original_Толщина_стен");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((string)(Original_Толщина_стен));
            }
            if ((Original_Перегородка_мансардного_этажа == null)) {
                throw new global::System.ArgumentNullException("Original_Перегородка_мансардного_этажа");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((string)(Original_Перегородка_мансардного_этажа));
            }
            if ((Original_Материалы_полов == null)) {
                throw new global::System.ArgumentNullException("Original_Материалы_полов");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((string)(Original_Материалы_полов));
            }
            if ((Original_Материалы_потолков == null)) {
                throw new global::System.ArgumentNullException("Original_Материалы_потолков");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((string)(Original_Материалы_потолков));
            }
            if ((Original_Оконные_рамы == null)) {
                throw new global::System.ArgumentNullException("Original_Оконные_рамы");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((string)(Original_Оконные_рамы));
            }
            if ((Original_Типы_дверей == null)) {
                throw new global::System.ArgumentNullException("Original_Типы_дверей");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((string)(Original_Типы_дверей));
            }
            if ((Original_Материалы_кровли == null)) {
                throw new global::System.ArgumentNullException("Original_Материалы_кровли");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((string)(Original_Материалы_кровли));
            }
            if ((Original_Вид_отопления == null)) {
                throw new global::System.ArgumentNullException("Original_Вид_отопления");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((string)(Original_Вид_отопления));
            }
            if ((Original_Тип_канализации == null)) {
                throw new global::System.ArgumentNullException("Original_Тип_канализации");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((string)(Original_Тип_канализации));
            }
            this.Adapter.UpdateCommand.Parameters[38].Value = ((int)(Original_Количество_комнат));
            if ((Original_Прочность_и_долговечность == null)) {
                throw new global::System.ArgumentNullException("Original_Прочность_и_долговечность");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((string)(Original_Прочность_и_долговечность));
            }
            if ((Original_Энергетическая_эффективность == null)) {
                throw new global::System.ArgumentNullException("Original_Энергетическая_эффективность");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[40].Value = ((string)(Original_Энергетическая_эффективность));
            }
            if ((Original_Санузел == null)) {
                throw new global::System.ArgumentNullException("Original_Санузел");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((string)(Original_Санузел));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    decimal Стоимость_материалов, 
                    decimal Стоимость_строительных_работ, 
                    string Размер_участка, 
                    int Площадь_дома, 
                    int Количество_этажей, 
                    string Тип_фундамента, 
                    string Материалы_стен, 
                    string Толщина_стен, 
                    string Перегородка_мансардного_этажа, 
                    string Материалы_полов, 
                    string Материалы_потолков, 
                    string Оконные_рамы, 
                    string Типы_дверей, 
                    string Материалы_кровли, 
                    string Вид_отопления, 
                    string Тип_канализации, 
                    int Количество_комнат, 
                    string Прочность_и_долговечность, 
                    string Энергетическая_эффективность, 
                    string Санузел, 
                    int Original_Номер_проекта_дома, 
                    decimal Original_Стоимость_материалов, 
                    decimal Original_Стоимость_строительных_работ, 
                    string Original_Размер_участка, 
                    int Original_Площадь_дома, 
                    int Original_Количество_этажей, 
                    string Original_Тип_фундамента, 
                    string Original_Материалы_стен, 
                    string Original_Толщина_стен, 
                    string Original_Перегородка_мансардного_этажа, 
                    string Original_Материалы_полов, 
                    string Original_Материалы_потолков, 
                    string Original_Оконные_рамы, 
                    string Original_Типы_дверей, 
                    string Original_Материалы_кровли, 
                    string Original_Вид_отопления, 
                    string Original_Тип_канализации, 
                    int Original_Количество_комнат, 
                    string Original_Прочность_и_долговечность, 
                    string Original_Энергетическая_эффективность, 
                    string Original_Санузел) {
            return this.Update(Original_Номер_проекта_дома, Стоимость_материалов, Стоимость_строительных_работ, Размер_участка, Площадь_дома, Количество_этажей, Тип_фундамента, Материалы_стен, Толщина_стен, Перегородка_мансардного_этажа, Материалы_полов, Материалы_потолков, Оконные_рамы, Типы_дверей, Материалы_кровли, Вид_отопления, Тип_канализации, Количество_комнат, Прочность_и_долговечность, Энергетическая_эффективность, Санузел, Original_Номер_проекта_дома, Original_Стоимость_материалов, Original_Стоимость_строительных_работ, Original_Размер_участка, Original_Площадь_дома, Original_Количество_этажей, Original_Тип_фундамента, Original_Материалы_стен, Original_Толщина_стен, Original_Перегородка_мансардного_этажа, Original_Материалы_полов, Original_Материалы_потолков, Original_Оконные_рамы, Original_Типы_дверей, Original_Материалы_кровли, Original_Вид_отопления, Original_Тип_канализации, Original_Количество_комнат, Original_Прочность_и_долговечность, Original_Энергетическая_эффективность, Original_Санузел);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Стоимость_постройки_домаTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public Стоимость_постройки_домаTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Стоимость постройки дома";
            tableMapping.ColumnMappings.Add("id", "id");
            tableMapping.ColumnMappings.Add("Номер проекта дома", "Номер проекта дома");
            tableMapping.ColumnMappings.Add("Общая стоимость дома", "Общая стоимость дома");
            tableMapping.ColumnMappings.Add("Срок постройки дома", "Срок постройки дома");
            tableMapping.ColumnMappings.Add("Стоимость земельного участка", "Стоимость земельного участка");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Стоимость постройки дома] WHERE (([id] = @Original_id) AND ([Номер проекта дома] = @Original_Номер_проекта_дома) AND ([Общая стоимость дома] = @Original_Общая_стоимость_дома) AND ([Срок постройки дома] = @Original_Срок_постройки_дома) AND ([Стоимость земельного участка] = @Original_Стоимость_земельного_участка))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Номер_проекта_дома", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Номер проекта дома", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Общая_стоимость_дома", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Общая стоимость дома", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Срок_постройки_дома", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Срок постройки дома", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Стоимость_земельного_участка", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Стоимость земельного участка", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Стоимость постройки дома] ([id], [Номер проекта дома], [Общая стоимость дома], [Срок постройки дома], [Стоимость земельного участка]) VALUES (@id, @Номер_проекта_дома, @Общая_стоимость_дома, @Срок_постройки_дома, @Стоимость_земельного_участка);
SELECT id, [Номер проекта дома], [Общая стоимость дома], [Срок постройки дома], [Стоимость земельного участка] FROM [Стоимость постройки дома] WHERE ([Номер проекта дома] = @Номер_проекта_дома)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Номер_проекта_дома", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Номер проекта дома", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Общая_стоимость_дома", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Общая стоимость дома", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Срок_постройки_дома", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Срок постройки дома", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Стоимость_земельного_участка", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Стоимость земельного участка", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Стоимость постройки дома] SET [id] = @id, [Номер проекта дома] = @Номер_проекта_дома, [Общая стоимость дома] = @Общая_стоимость_дома, [Срок постройки дома] = @Срок_постройки_дома, [Стоимость земельного участка] = @Стоимость_земельного_участка WHERE (([id] = @Original_id) AND ([Номер проекта дома] = @Original_Номер_проекта_дома) AND ([Общая стоимость дома] = @Original_Общая_стоимость_дома) AND ([Срок постройки дома] = @Original_Срок_постройки_дома) AND ([Стоимость земельного участка] = @Original_Стоимость_земельного_участка));
SELECT id, [Номер проекта дома], [Общая стоимость дома], [Срок постройки дома], [Стоимость земельного участка] FROM [Стоимость постройки дома] WHERE ([Номер проекта дома] = @Номер_проекта_дома)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Номер_проекта_дома", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Номер проекта дома", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Общая_стоимость_дома", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Общая стоимость дома", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Срок_постройки_дома", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Срок постройки дома", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Стоимость_земельного_участка", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Стоимость земельного участка", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Номер_проекта_дома", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Номер проекта дома", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Общая_стоимость_дома", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Общая стоимость дома", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Срок_постройки_дома", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Срок постройки дома", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Стоимость_земельного_участка", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Стоимость земельного участка", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Diplomnaya.Properties.Settings.Default.DiplommConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT id, [Номер проекта дома], [Общая стоимость дома], [Срок постройки дома], [" +
                "Стоимость земельного участка] FROM dbo.[Стоимость постройки дома]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DiplommDataSet.Стоимость_постройки_домаDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DiplommDataSet.Стоимость_постройки_домаDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DiplommDataSet.Стоимость_постройки_домаDataTable dataTable = new DiplommDataSet.Стоимость_постройки_домаDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DiplommDataSet.Стоимость_постройки_домаDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DiplommDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Стоимость постройки дома");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_id, int Original_Номер_проекта_дома, decimal Original_Общая_стоимость_дома, string Original_Срок_постройки_дома, decimal Original_Стоимость_земельного_участка) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_Номер_проекта_дома));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((decimal)(Original_Общая_стоимость_дома));
            if ((Original_Срок_постройки_дома == null)) {
                throw new global::System.ArgumentNullException("Original_Срок_постройки_дома");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_Срок_постройки_дома));
            }
            this.Adapter.DeleteCommand.Parameters[4].Value = ((decimal)(Original_Стоимость_земельного_участка));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int id, int Номер_проекта_дома, decimal Общая_стоимость_дома, string Срок_постройки_дома, decimal Стоимость_земельного_участка) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(id));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(Номер_проекта_дома));
            this.Adapter.InsertCommand.Parameters[2].Value = ((decimal)(Общая_стоимость_дома));
            if ((Срок_постройки_дома == null)) {
                throw new global::System.ArgumentNullException("Срок_постройки_дома");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Срок_постройки_дома));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((decimal)(Стоимость_земельного_участка));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int id, int Номер_проекта_дома, decimal Общая_стоимость_дома, string Срок_постройки_дома, decimal Стоимость_земельного_участка, int Original_id, int Original_Номер_проекта_дома, decimal Original_Общая_стоимость_дома, string Original_Срок_постройки_дома, decimal Original_Стоимость_земельного_участка) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(id));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(Номер_проекта_дома));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((decimal)(Общая_стоимость_дома));
            if ((Срок_постройки_дома == null)) {
                throw new global::System.ArgumentNullException("Срок_постройки_дома");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Срок_постройки_дома));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((decimal)(Стоимость_земельного_участка));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_id));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_Номер_проекта_дома));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((decimal)(Original_Общая_стоимость_дома));
            if ((Original_Срок_постройки_дома == null)) {
                throw new global::System.ArgumentNullException("Original_Срок_постройки_дома");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_Срок_постройки_дома));
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((decimal)(Original_Стоимость_земельного_участка));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int id, decimal Общая_стоимость_дома, string Срок_постройки_дома, decimal Стоимость_земельного_участка, int Original_id, int Original_Номер_проекта_дома, decimal Original_Общая_стоимость_дома, string Original_Срок_постройки_дома, decimal Original_Стоимость_земельного_участка) {
            return this.Update(id, Original_Номер_проекта_дома, Общая_стоимость_дома, Срок_постройки_дома, Стоимость_земельного_участка, Original_id, Original_Номер_проекта_дома, Original_Общая_стоимость_дома, Original_Срок_постройки_дома, Original_Стоимость_земельного_участка);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class УчастокTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public УчастокTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Участок";
            tableMapping.ColumnMappings.Add("id", "id");
            tableMapping.ColumnMappings.Add("Стоимость участка", "Стоимость участка");
            tableMapping.ColumnMappings.Add("Номер участка", "Номер участка");
            tableMapping.ColumnMappings.Add("Уточнённая площадь", "Уточнённая площадь");
            tableMapping.ColumnMappings.Add("Категория земель", "Категория земель");
            tableMapping.ColumnMappings.Add("Кадастровый номер", "Кадастровый номер");
            tableMapping.ColumnMappings.Add("Электроснабжение", "Электроснабжение");
            tableMapping.ColumnMappings.Add("Высота проводов над уровнем земли", "Высота проводов над уровнем земли");
            tableMapping.ColumnMappings.Add("Расстояние до опоры", "Расстояние до опоры");
            tableMapping.ColumnMappings.Add("Протяжённость отводной линии", "Протяжённость отводной линии");
            tableMapping.ColumnMappings.Add("Газоснабжение", "Газоснабжение");
            tableMapping.ColumnMappings.Add("Расстояние от подземного газопровода до фундамента", "Расстояние от подземного газопровода до фундамента");
            tableMapping.ColumnMappings.Add("Расстояние до газовой магистрали", "Расстояние до газовой магистрали");
            tableMapping.ColumnMappings.Add("Водоснабжение", "Водоснабжение");
            tableMapping.ColumnMappings.Add("Расстояние до фундамента дома", "Расстояние до фундамента дома");
            tableMapping.ColumnMappings.Add("Расстояние от ограждений", "Расстояние от ограждений");
            tableMapping.ColumnMappings.Add("Расстояние от ствола дерева", "Расстояние от ствола дерева");
            tableMapping.ColumnMappings.Add("Расстояние от других инженерных сетей", "Расстояние от других инженерных сетей");
            tableMapping.ColumnMappings.Add("Расстояние водопроводных колодцев от фундамента дома", "Расстояние водопроводных колодцев от фундамента дома");
            tableMapping.ColumnMappings.Add("Тип канализации", "Тип канализации");
            tableMapping.ColumnMappings.Add("Диаметры труб", "Диаметры труб");
            tableMapping.ColumnMappings.Add("Минимальная глубина заложения лотка трубопровода", "Минимальная глубина заложения лотка трубопровода");
            tableMapping.ColumnMappings.Add("Смотровые колодцы", "Смотровые колодцы");
            tableMapping.ColumnMappings.Add("Расстояние до дороги", "Расстояние до дороги");
            tableMapping.ColumnMappings.Add("Расстояние от источника питьевой воды", "Расстояние от источника питьевой воды");
            tableMapping.ColumnMappings.Add("Расстояние от деревьев", "Расстояние от деревьев");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Участок] WHERE (([id] = @Original_id) AND ([Стоимость участка]" +
                " = @Original_Стоимость_участка) AND ([Номер участка] = @Original_Номер_участка) " +
                "AND ([Уточнённая площадь] = @Original_Уточнённая_площадь) AND ([Категория земель" +
                "] = @Original_Категория_земель) AND ([Кадастровый номер] = @Original_Кадастровый" +
                "_номер) AND ([Электроснабжение] = @Original_Электроснабжение) AND ([Высота прово" +
                "дов над уровнем земли] = @Original_Высота_проводов_над_уровнем_земли) AND ([Расс" +
                "тояние до опоры] = @Original_Расстояние_до_опоры) AND ([Протяжённость отводной л" +
                "инии] = @Original_Протяжённость_отводной_линии) AND ([Газоснабжение] = @Original" +
                "_Газоснабжение) AND ([Расстояние от подземного газопровода до фундамента] = @Ori" +
                "ginal_Расстояние_от_подземного_газопровода_до_фундамента) AND ([Расстояние до га" +
                "зовой магистрали] = @Original_Расстояние_до_газовой_магистрали) AND ([Водоснабже" +
                "ние] = @Original_Водоснабжение) AND ([Расстояние до фундамента дома] = @Original" +
                "_Расстояние_до_фундамента_дома) AND ([Расстояние от ограждений] = @Original_Расс" +
                "тояние_от_ограждений) AND ([Расстояние от ствола дерева] = @Original_Расстояние_" +
                "от_ствола_дерева) AND ([Расстояние от других инженерных сетей] = @Original_Расст" +
                "ояние_от_других_инженерных_сетей) AND ([Расстояние водопроводных колодцев от фун" +
                "дамента дома] = @Original_Расстояние_водопроводных_колодцев_от_фундамента_дома) " +
                "AND ([Тип канализации] = @Original_Тип_канализации) AND ([Диаметры труб] = @Orig" +
                "inal_Диаметры_труб) AND ([Минимальная глубина заложения лотка трубопровода] = @O" +
                "riginal_Минимальная_глубина_заложения_лотка_трубопровода) AND ((@IsNull_Смотровы" +
                "е_колодцы = 1 AND [Смотровые колодцы] IS NULL) OR ([Смотровые колодцы] = @Origin" +
                "al_Смотровые_колодцы)) AND ((@IsNull_Расстояние_до_дороги = 1 AND [Расстояние до" +
                " дороги] IS NULL) OR ([Расстояние до дороги] = @Original_Расстояние_до_дороги)) " +
                "AND ((@IsNull_Расстояние_от_источника_питьевой_воды = 1 AND [Расстояние от источ" +
                "ника питьевой воды] IS NULL) OR ([Расстояние от источника питьевой воды] = @Orig" +
                "inal_Расстояние_от_источника_питьевой_воды)) AND ((@IsNull_Расстояние_от_деревье" +
                "в = 1 AND [Расстояние от деревьев] IS NULL) OR ([Расстояние от деревьев] = @Orig" +
                "inal_Расстояние_от_деревьев)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Стоимость_участка", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Стоимость участка", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Номер_участка", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Номер участка", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Уточнённая_площадь", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Уточнённая площадь", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Категория_земель", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Категория земель", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Кадастровый_номер", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Кадастровый номер", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Электроснабжение", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Электроснабжение", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Высота_проводов_над_уровнем_земли", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Высота проводов над уровнем земли", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Расстояние_до_опоры", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Расстояние до опоры", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Протяжённость_отводной_линии", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Протяжённость отводной линии", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Газоснабжение", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Газоснабжение", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Расстояние_от_подземного_газопровода_до_фундамента", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Расстояние от подземного газопровода до фундамента", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Расстояние_до_газовой_магистрали", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Расстояние до газовой магистрали", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Водоснабжение", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Водоснабжение", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Расстояние_до_фундамента_дома", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Расстояние до фундамента дома", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Расстояние_от_ограждений", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Расстояние от ограждений", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Расстояние_от_ствола_дерева", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Расстояние от ствола дерева", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Расстояние_от_других_инженерных_сетей", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Расстояние от других инженерных сетей", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Расстояние_водопроводных_колодцев_от_фундамента_дома", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Расстояние водопроводных колодцев от фундамента дома", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Тип_канализации", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Тип канализации", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Диаметры_труб", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Диаметры труб", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Минимальная_глубина_заложения_лотка_трубопровода", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Минимальная глубина заложения лотка трубопровода", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Смотровые_колодцы", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Смотровые колодцы", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Смотровые_колодцы", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Смотровые колодцы", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Расстояние_до_дороги", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Расстояние до дороги", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Расстояние_до_дороги", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Расстояние до дороги", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Расстояние_от_источника_питьевой_воды", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Расстояние от источника питьевой воды", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Расстояние_от_источника_питьевой_воды", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Расстояние от источника питьевой воды", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Расстояние_от_деревьев", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Расстояние от деревьев", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Расстояние_от_деревьев", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Расстояние от деревьев", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Участок] ([id], [Стоимость участка], [Номер участка], [Уточнён" +
                "ная площадь], [Категория земель], [Кадастровый номер], [Электроснабжение], [Высо" +
                "та проводов над уровнем земли], [Расстояние до опоры], [Протяжённость отводной л" +
                "инии], [Газоснабжение], [Расстояние от подземного газопровода до фундамента], [Р" +
                "асстояние до газовой магистрали], [Водоснабжение], [Расстояние до фундамента дом" +
                "а], [Расстояние от ограждений], [Расстояние от ствола дерева], [Расстояние от др" +
                "угих инженерных сетей], [Расстояние водопроводных колодцев от фундамента дома], " +
                "[Тип канализации], [Диаметры труб], [Минимальная глубина заложения лотка трубопр" +
                "овода], [Смотровые колодцы], [Расстояние до дороги], [Расстояние от источника пи" +
                "тьевой воды], [Расстояние от деревьев]) VALUES (@id, @Стоимость_участка, @Номер_" +
                "участка, @Уточнённая_площадь, @Категория_земель, @Кадастровый_номер, @Электросна" +
                "бжение, @Высота_проводов_над_уровнем_земли, @Расстояние_до_опоры, @Протяжённость" +
                "_отводной_линии, @Газоснабжение, @Расстояние_от_подземного_газопровода_до_фундам" +
                "ента, @Расстояние_до_газовой_магистрали, @Водоснабжение, @Расстояние_до_фундамен" +
                "та_дома, @Расстояние_от_ограждений, @Расстояние_от_ствола_дерева, @Расстояние_от" +
                "_других_инженерных_сетей, @Расстояние_водопроводных_колодцев_от_фундамента_дома," +
                " @Тип_канализации, @Диаметры_труб, @Минимальная_глубина_заложения_лотка_трубопро" +
                "вода, @Смотровые_колодцы, @Расстояние_до_дороги, @Расстояние_от_источника_питьев" +
                "ой_воды, @Расстояние_от_деревьев);\r\nSELECT id, [Стоимость участка], [Номер участ" +
                "ка], [Уточнённая площадь], [Категория земель], [Кадастровый номер], Электроснабж" +
                "ение, [Высота проводов над уровнем земли], [Расстояние до опоры], [Протяжённость" +
                " отводной линии], Газоснабжение, [Расстояние от подземного газопровода до фундам" +
                "ента], [Расстояние до газовой магистрали], Водоснабжение, [Расстояние до фундаме" +
                "нта дома], [Расстояние от ограждений], [Расстояние от ствола дерева], [Расстояни" +
                "е от других инженерных сетей], [Расстояние водопроводных колодцев от фундамента " +
                "дома], [Тип канализации], [Диаметры труб], [Минимальная глубина заложения лотка " +
                "трубопровода], [Смотровые колодцы], [Расстояние до дороги], [Расстояние от источ" +
                "ника питьевой воды], [Расстояние от деревьев] FROM Участок WHERE (id = @id)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Стоимость_участка", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Стоимость участка", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Номер_участка", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Номер участка", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Уточнённая_площадь", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Уточнённая площадь", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Категория_земель", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Категория земель", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Кадастровый_номер", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Кадастровый номер", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Электроснабжение", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Электроснабжение", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Высота_проводов_над_уровнем_земли", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Высота проводов над уровнем земли", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Расстояние_до_опоры", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Расстояние до опоры", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Протяжённость_отводной_линии", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Протяжённость отводной линии", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Газоснабжение", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Газоснабжение", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Расстояние_от_подземного_газопровода_до_фундамента", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Расстояние от подземного газопровода до фундамента", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Расстояние_до_газовой_магистрали", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Расстояние до газовой магистрали", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Водоснабжение", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Водоснабжение", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Расстояние_до_фундамента_дома", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Расстояние до фундамента дома", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Расстояние_от_ограждений", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Расстояние от ограждений", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Расстояние_от_ствола_дерева", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Расстояние от ствола дерева", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Расстояние_от_других_инженерных_сетей", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Расстояние от других инженерных сетей", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Расстояние_водопроводных_колодцев_от_фундамента_дома", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Расстояние водопроводных колодцев от фундамента дома", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Тип_канализации", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Тип канализации", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Диаметры_труб", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Диаметры труб", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Минимальная_глубина_заложения_лотка_трубопровода", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Минимальная глубина заложения лотка трубопровода", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Смотровые_колодцы", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Смотровые колодцы", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Расстояние_до_дороги", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Расстояние до дороги", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Расстояние_от_источника_питьевой_воды", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Расстояние от источника питьевой воды", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Расстояние_от_деревьев", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Расстояние от деревьев", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Участок] SET [id] = @id, [Стоимость участка] = @Стоимость_участка, " +
                "[Номер участка] = @Номер_участка, [Уточнённая площадь] = @Уточнённая_площадь, [К" +
                "атегория земель] = @Категория_земель, [Кадастровый номер] = @Кадастровый_номер, " +
                "[Электроснабжение] = @Электроснабжение, [Высота проводов над уровнем земли] = @В" +
                "ысота_проводов_над_уровнем_земли, [Расстояние до опоры] = @Расстояние_до_опоры, " +
                "[Протяжённость отводной линии] = @Протяжённость_отводной_линии, [Газоснабжение] " +
                "= @Газоснабжение, [Расстояние от подземного газопровода до фундамента] = @Рассто" +
                "яние_от_подземного_газопровода_до_фундамента, [Расстояние до газовой магистрали]" +
                " = @Расстояние_до_газовой_магистрали, [Водоснабжение] = @Водоснабжение, [Расстоя" +
                "ние до фундамента дома] = @Расстояние_до_фундамента_дома, [Расстояние от огражде" +
                "ний] = @Расстояние_от_ограждений, [Расстояние от ствола дерева] = @Расстояние_от" +
                "_ствола_дерева, [Расстояние от других инженерных сетей] = @Расстояние_от_других_" +
                "инженерных_сетей, [Расстояние водопроводных колодцев от фундамента дома] = @Расс" +
                "тояние_водопроводных_колодцев_от_фундамента_дома, [Тип канализации] = @Тип_канал" +
                "изации, [Диаметры труб] = @Диаметры_труб, [Минимальная глубина заложения лотка т" +
                "рубопровода] = @Минимальная_глубина_заложения_лотка_трубопровода, [Смотровые кол" +
                "одцы] = @Смотровые_колодцы, [Расстояние до дороги] = @Расстояние_до_дороги, [Рас" +
                "стояние от источника питьевой воды] = @Расстояние_от_источника_питьевой_воды, [Р" +
                "асстояние от деревьев] = @Расстояние_от_деревьев WHERE (([id] = @Original_id) AN" +
                "D ([Стоимость участка] = @Original_Стоимость_участка) AND ([Номер участка] = @Or" +
                "iginal_Номер_участка) AND ([Уточнённая площадь] = @Original_Уточнённая_площадь) " +
                "AND ([Категория земель] = @Original_Категория_земель) AND ([Кадастровый номер] =" +
                " @Original_Кадастровый_номер) AND ([Электроснабжение] = @Original_Электроснабжен" +
                "ие) AND ([Высота проводов над уровнем земли] = @Original_Высота_проводов_над_уро" +
                "внем_земли) AND ([Расстояние до опоры] = @Original_Расстояние_до_опоры) AND ([Пр" +
                "отяжённость отводной линии] = @Original_Протяжённость_отводной_линии) AND ([Газо" +
                "снабжение] = @Original_Газоснабжение) AND ([Расстояние от подземного газопровода" +
                " до фундамента] = @Original_Расстояние_от_подземного_газопровода_до_фундамента) " +
                "AND ([Расстояние до газовой магистрали] = @Original_Расстояние_до_газовой_магист" +
                "рали) AND ([Водоснабжение] = @Original_Водоснабжение) AND ([Расстояние до фундам" +
                "ента дома] = @Original_Расстояние_до_фундамента_дома) AND ([Расстояние от огражд" +
                "ений] = @Original_Расстояние_от_ограждений) AND ([Расстояние от ствола дерева] =" +
                " @Original_Расстояние_от_ствола_дерева) AND ([Расстояние от других инженерных се" +
                "тей] = @Original_Расстояние_от_других_инженерных_сетей) AND ([Расстояние водопро" +
                "водных колодцев от фундамента дома] = @Original_Расстояние_водопроводных_колодце" +
                "в_от_фундамента_дома) AND ([Тип канализации] = @Original_Тип_канализации) AND ([" +
                "Диаметры труб] = @Original_Диаметры_труб) AND ([Минимальная глубина заложения ло" +
                "тка трубопровода] = @Original_Минимальная_глубина_заложения_лотка_трубопровода) " +
                "AND ((@IsNull_Смотровые_колодцы = 1 AND [Смотровые колодцы] IS NULL) OR ([Смотро" +
                "вые колодцы] = @Original_Смотровые_колодцы)) AND ((@IsNull_Расстояние_до_дороги " +
                "= 1 AND [Расстояние до дороги] IS NULL) OR ([Расстояние до дороги] = @Original_Р" +
                "асстояние_до_дороги)) AND ((@IsNull_Расстояние_от_источника_питьевой_воды = 1 AN" +
                "D [Расстояние от источника питьевой воды] IS NULL) OR ([Расстояние от источника " +
                "питьевой воды] = @Original_Расстояние_от_источника_питьевой_воды)) AND ((@IsNull" +
                "_Расстояние_от_деревьев = 1 AND [Расстояние от деревьев] IS NULL) OR ([Расстояни" +
                "е от деревьев] = @Original_Расстояние_от_деревьев)));\r\nSELECT id, [Стоимость уча" +
                "стка], [Номер участка], [Уточнённая площадь], [Категория земель], [Кадастровый н" +
                "омер], Электроснабжение, [Высота проводов над уровнем земли], [Расстояние до опо" +
                "ры], [Протяжённость отводной линии], Газоснабжение, [Расстояние от подземного га" +
                "зопровода до фундамента], [Расстояние до газовой магистрали], Водоснабжение, [Ра" +
                "сстояние до фундамента дома], [Расстояние от ограждений], [Расстояние от ствола " +
                "дерева], [Расстояние от других инженерных сетей], [Расстояние водопроводных коло" +
                "дцев от фундамента дома], [Тип канализации], [Диаметры труб], [Минимальная глуби" +
                "на заложения лотка трубопровода], [Смотровые колодцы], [Расстояние до дороги], [" +
                "Расстояние от источника питьевой воды], [Расстояние от деревьев] FROM Участок WH" +
                "ERE (id = @id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Стоимость_участка", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Стоимость участка", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Номер_участка", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Номер участка", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Уточнённая_площадь", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Уточнённая площадь", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Категория_земель", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Категория земель", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Кадастровый_номер", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Кадастровый номер", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Электроснабжение", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Электроснабжение", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Высота_проводов_над_уровнем_земли", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Высота проводов над уровнем земли", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Расстояние_до_опоры", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Расстояние до опоры", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Протяжённость_отводной_линии", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Протяжённость отводной линии", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Газоснабжение", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Газоснабжение", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Расстояние_от_подземного_газопровода_до_фундамента", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Расстояние от подземного газопровода до фундамента", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Расстояние_до_газовой_магистрали", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Расстояние до газовой магистрали", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Водоснабжение", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Водоснабжение", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Расстояние_до_фундамента_дома", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Расстояние до фундамента дома", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Расстояние_от_ограждений", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Расстояние от ограждений", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Расстояние_от_ствола_дерева", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Расстояние от ствола дерева", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Расстояние_от_других_инженерных_сетей", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Расстояние от других инженерных сетей", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Расстояние_водопроводных_колодцев_от_фундамента_дома", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Расстояние водопроводных колодцев от фундамента дома", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Тип_канализации", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Тип канализации", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Диаметры_труб", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Диаметры труб", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Минимальная_глубина_заложения_лотка_трубопровода", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Минимальная глубина заложения лотка трубопровода", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Смотровые_колодцы", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Смотровые колодцы", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Расстояние_до_дороги", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Расстояние до дороги", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Расстояние_от_источника_питьевой_воды", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Расстояние от источника питьевой воды", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Расстояние_от_деревьев", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Расстояние от деревьев", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Стоимость_участка", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Стоимость участка", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Номер_участка", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Номер участка", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Уточнённая_площадь", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Уточнённая площадь", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Категория_земель", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Категория земель", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Кадастровый_номер", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Кадастровый номер", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Электроснабжение", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Электроснабжение", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Высота_проводов_над_уровнем_земли", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Высота проводов над уровнем земли", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Расстояние_до_опоры", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Расстояние до опоры", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Протяжённость_отводной_линии", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Протяжённость отводной линии", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Газоснабжение", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Газоснабжение", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Расстояние_от_подземного_газопровода_до_фундамента", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Расстояние от подземного газопровода до фундамента", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Расстояние_до_газовой_магистрали", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Расстояние до газовой магистрали", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Водоснабжение", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Водоснабжение", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Расстояние_до_фундамента_дома", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Расстояние до фундамента дома", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Расстояние_от_ограждений", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Расстояние от ограждений", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Расстояние_от_ствола_дерева", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Расстояние от ствола дерева", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Расстояние_от_других_инженерных_сетей", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Расстояние от других инженерных сетей", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Расстояние_водопроводных_колодцев_от_фундамента_дома", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Расстояние водопроводных колодцев от фундамента дома", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Тип_канализации", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Тип канализации", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Диаметры_труб", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Диаметры труб", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Минимальная_глубина_заложения_лотка_трубопровода", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Минимальная глубина заложения лотка трубопровода", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Смотровые_колодцы", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Смотровые колодцы", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Смотровые_колодцы", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Смотровые колодцы", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Расстояние_до_дороги", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Расстояние до дороги", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Расстояние_до_дороги", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Расстояние до дороги", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Расстояние_от_источника_питьевой_воды", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Расстояние от источника питьевой воды", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Расстояние_от_источника_питьевой_воды", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Расстояние от источника питьевой воды", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Расстояние_от_деревьев", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Расстояние от деревьев", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Расстояние_от_деревьев", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Расстояние от деревьев", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Diplomnaya.Properties.Settings.Default.DiplommConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT id, [Стоимость участка], [Номер участка], [Уточнённая площадь], [Категория земель], [Кадастровый номер], Электроснабжение, [Высота проводов над уровнем земли], [Расстояние до опоры], [Протяжённость отводной линии], Газоснабжение, [Расстояние от подземного газопровода до фундамента], [Расстояние до газовой магистрали], Водоснабжение, [Расстояние до фундамента дома], [Расстояние от ограждений], [Расстояние от ствола дерева], [Расстояние от других инженерных сетей], [Расстояние водопроводных колодцев от фундамента дома], [Тип канализации], [Диаметры труб], [Минимальная глубина заложения лотка трубопровода], [Смотровые колодцы], [Расстояние до дороги], [Расстояние от источника питьевой воды], [Расстояние от деревьев] FROM dbo.Участок";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DiplommDataSet.УчастокDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DiplommDataSet.УчастокDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DiplommDataSet.УчастокDataTable dataTable = new DiplommDataSet.УчастокDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DiplommDataSet.УчастокDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DiplommDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Участок");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    int Original_id, 
                    decimal Original_Стоимость_участка, 
                    int Original_Номер_участка, 
                    int Original_Уточнённая_площадь, 
                    string Original_Категория_земель, 
                    string Original_Кадастровый_номер, 
                    bool Original_Электроснабжение, 
                    int Original_Высота_проводов_над_уровнем_земли, 
                    int Original_Расстояние_до_опоры, 
                    int Original_Протяжённость_отводной_линии, 
                    bool Original_Газоснабжение, 
                    int Original_Расстояние_от_подземного_газопровода_до_фундамента, 
                    int Original_Расстояние_до_газовой_магистрали, 
                    bool Original_Водоснабжение, 
                    int Original_Расстояние_до_фундамента_дома, 
                    int Original_Расстояние_от_ограждений, 
                    int Original_Расстояние_от_ствола_дерева, 
                    int Original_Расстояние_от_других_инженерных_сетей, 
                    int Original_Расстояние_водопроводных_колодцев_от_фундамента_дома, 
                    string Original_Тип_канализации, 
                    int Original_Диаметры_труб, 
                    int Original_Минимальная_глубина_заложения_лотка_трубопровода, 
                    string Original_Смотровые_колодцы, 
                    global::System.Nullable<int> Original_Расстояние_до_дороги, 
                    global::System.Nullable<int> Original_Расстояние_от_источника_питьевой_воды, 
                    global::System.Nullable<int> Original_Расстояние_от_деревьев) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((decimal)(Original_Стоимость_участка));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_Номер_участка));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_Уточнённая_площадь));
            if ((Original_Категория_земель == null)) {
                throw new global::System.ArgumentNullException("Original_Категория_земель");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_Категория_земель));
            }
            if ((Original_Кадастровый_номер == null)) {
                throw new global::System.ArgumentNullException("Original_Кадастровый_номер");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_Кадастровый_номер));
            }
            this.Adapter.DeleteCommand.Parameters[6].Value = ((bool)(Original_Электроснабжение));
            this.Adapter.DeleteCommand.Parameters[7].Value = ((int)(Original_Высота_проводов_над_уровнем_земли));
            this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_Расстояние_до_опоры));
            this.Adapter.DeleteCommand.Parameters[9].Value = ((int)(Original_Протяжённость_отводной_линии));
            this.Adapter.DeleteCommand.Parameters[10].Value = ((bool)(Original_Газоснабжение));
            this.Adapter.DeleteCommand.Parameters[11].Value = ((int)(Original_Расстояние_от_подземного_газопровода_до_фундамента));
            this.Adapter.DeleteCommand.Parameters[12].Value = ((int)(Original_Расстояние_до_газовой_магистрали));
            this.Adapter.DeleteCommand.Parameters[13].Value = ((bool)(Original_Водоснабжение));
            this.Adapter.DeleteCommand.Parameters[14].Value = ((int)(Original_Расстояние_до_фундамента_дома));
            this.Adapter.DeleteCommand.Parameters[15].Value = ((int)(Original_Расстояние_от_ограждений));
            this.Adapter.DeleteCommand.Parameters[16].Value = ((int)(Original_Расстояние_от_ствола_дерева));
            this.Adapter.DeleteCommand.Parameters[17].Value = ((int)(Original_Расстояние_от_других_инженерных_сетей));
            this.Adapter.DeleteCommand.Parameters[18].Value = ((int)(Original_Расстояние_водопроводных_колодцев_от_фундамента_дома));
            if ((Original_Тип_канализации == null)) {
                throw new global::System.ArgumentNullException("Original_Тип_канализации");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((string)(Original_Тип_канализации));
            }
            this.Adapter.DeleteCommand.Parameters[20].Value = ((int)(Original_Диаметры_труб));
            this.Adapter.DeleteCommand.Parameters[21].Value = ((int)(Original_Минимальная_глубина_заложения_лотка_трубопровода));
            if ((Original_Смотровые_колодцы == null)) {
                this.Adapter.DeleteCommand.Parameters[22].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[22].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[23].Value = ((string)(Original_Смотровые_колодцы));
            }
            if ((Original_Расстояние_до_дороги.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[24].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[25].Value = ((int)(Original_Расстояние_до_дороги.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[24].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            if ((Original_Расстояние_от_источника_питьевой_воды.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[26].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[27].Value = ((int)(Original_Расстояние_от_источника_питьевой_воды.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[26].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            if ((Original_Расстояние_от_деревьев.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[28].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[29].Value = ((int)(Original_Расстояние_от_деревьев.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[28].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    int id, 
                    decimal Стоимость_участка, 
                    int Номер_участка, 
                    int Уточнённая_площадь, 
                    string Категория_земель, 
                    string Кадастровый_номер, 
                    bool Электроснабжение, 
                    int Высота_проводов_над_уровнем_земли, 
                    int Расстояние_до_опоры, 
                    int Протяжённость_отводной_линии, 
                    bool Газоснабжение, 
                    int Расстояние_от_подземного_газопровода_до_фундамента, 
                    int Расстояние_до_газовой_магистрали, 
                    bool Водоснабжение, 
                    int Расстояние_до_фундамента_дома, 
                    int Расстояние_от_ограждений, 
                    int Расстояние_от_ствола_дерева, 
                    int Расстояние_от_других_инженерных_сетей, 
                    int Расстояние_водопроводных_колодцев_от_фундамента_дома, 
                    string Тип_канализации, 
                    int Диаметры_труб, 
                    int Минимальная_глубина_заложения_лотка_трубопровода, 
                    string Смотровые_колодцы, 
                    global::System.Nullable<int> Расстояние_до_дороги, 
                    global::System.Nullable<int> Расстояние_от_источника_питьевой_воды, 
                    global::System.Nullable<int> Расстояние_от_деревьев) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(id));
            this.Adapter.InsertCommand.Parameters[1].Value = ((decimal)(Стоимость_участка));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(Номер_участка));
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(Уточнённая_площадь));
            if ((Категория_земель == null)) {
                throw new global::System.ArgumentNullException("Категория_земель");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(Категория_земель));
            }
            if ((Кадастровый_номер == null)) {
                throw new global::System.ArgumentNullException("Кадастровый_номер");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(Кадастровый_номер));
            }
            this.Adapter.InsertCommand.Parameters[6].Value = ((bool)(Электроснабжение));
            this.Adapter.InsertCommand.Parameters[7].Value = ((int)(Высота_проводов_над_уровнем_земли));
            this.Adapter.InsertCommand.Parameters[8].Value = ((int)(Расстояние_до_опоры));
            this.Adapter.InsertCommand.Parameters[9].Value = ((int)(Протяжённость_отводной_линии));
            this.Adapter.InsertCommand.Parameters[10].Value = ((bool)(Газоснабжение));
            this.Adapter.InsertCommand.Parameters[11].Value = ((int)(Расстояние_от_подземного_газопровода_до_фундамента));
            this.Adapter.InsertCommand.Parameters[12].Value = ((int)(Расстояние_до_газовой_магистрали));
            this.Adapter.InsertCommand.Parameters[13].Value = ((bool)(Водоснабжение));
            this.Adapter.InsertCommand.Parameters[14].Value = ((int)(Расстояние_до_фундамента_дома));
            this.Adapter.InsertCommand.Parameters[15].Value = ((int)(Расстояние_от_ограждений));
            this.Adapter.InsertCommand.Parameters[16].Value = ((int)(Расстояние_от_ствола_дерева));
            this.Adapter.InsertCommand.Parameters[17].Value = ((int)(Расстояние_от_других_инженерных_сетей));
            this.Adapter.InsertCommand.Parameters[18].Value = ((int)(Расстояние_водопроводных_колодцев_от_фундамента_дома));
            if ((Тип_канализации == null)) {
                throw new global::System.ArgumentNullException("Тип_канализации");
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = ((string)(Тип_канализации));
            }
            this.Adapter.InsertCommand.Parameters[20].Value = ((int)(Диаметры_труб));
            this.Adapter.InsertCommand.Parameters[21].Value = ((int)(Минимальная_глубина_заложения_лотка_трубопровода));
            if ((Смотровые_колодцы == null)) {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = ((string)(Смотровые_колодцы));
            }
            if ((Расстояние_до_дороги.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[23].Value = ((int)(Расстояние_до_дороги.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((Расстояние_от_источника_питьевой_воды.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[24].Value = ((int)(Расстояние_от_источника_питьевой_воды.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((Расстояние_от_деревьев.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[25].Value = ((int)(Расстояние_от_деревьев.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int id, 
                    decimal Стоимость_участка, 
                    int Номер_участка, 
                    int Уточнённая_площадь, 
                    string Категория_земель, 
                    string Кадастровый_номер, 
                    bool Электроснабжение, 
                    int Высота_проводов_над_уровнем_земли, 
                    int Расстояние_до_опоры, 
                    int Протяжённость_отводной_линии, 
                    bool Газоснабжение, 
                    int Расстояние_от_подземного_газопровода_до_фундамента, 
                    int Расстояние_до_газовой_магистрали, 
                    bool Водоснабжение, 
                    int Расстояние_до_фундамента_дома, 
                    int Расстояние_от_ограждений, 
                    int Расстояние_от_ствола_дерева, 
                    int Расстояние_от_других_инженерных_сетей, 
                    int Расстояние_водопроводных_колодцев_от_фундамента_дома, 
                    string Тип_канализации, 
                    int Диаметры_труб, 
                    int Минимальная_глубина_заложения_лотка_трубопровода, 
                    string Смотровые_колодцы, 
                    global::System.Nullable<int> Расстояние_до_дороги, 
                    global::System.Nullable<int> Расстояние_от_источника_питьевой_воды, 
                    global::System.Nullable<int> Расстояние_от_деревьев, 
                    int Original_id, 
                    decimal Original_Стоимость_участка, 
                    int Original_Номер_участка, 
                    int Original_Уточнённая_площадь, 
                    string Original_Категория_земель, 
                    string Original_Кадастровый_номер, 
                    bool Original_Электроснабжение, 
                    int Original_Высота_проводов_над_уровнем_земли, 
                    int Original_Расстояние_до_опоры, 
                    int Original_Протяжённость_отводной_линии, 
                    bool Original_Газоснабжение, 
                    int Original_Расстояние_от_подземного_газопровода_до_фундамента, 
                    int Original_Расстояние_до_газовой_магистрали, 
                    bool Original_Водоснабжение, 
                    int Original_Расстояние_до_фундамента_дома, 
                    int Original_Расстояние_от_ограждений, 
                    int Original_Расстояние_от_ствола_дерева, 
                    int Original_Расстояние_от_других_инженерных_сетей, 
                    int Original_Расстояние_водопроводных_колодцев_от_фундамента_дома, 
                    string Original_Тип_канализации, 
                    int Original_Диаметры_труб, 
                    int Original_Минимальная_глубина_заложения_лотка_трубопровода, 
                    string Original_Смотровые_колодцы, 
                    global::System.Nullable<int> Original_Расстояние_до_дороги, 
                    global::System.Nullable<int> Original_Расстояние_от_источника_питьевой_воды, 
                    global::System.Nullable<int> Original_Расстояние_от_деревьев) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(id));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((decimal)(Стоимость_участка));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Номер_участка));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Уточнённая_площадь));
            if ((Категория_земель == null)) {
                throw new global::System.ArgumentNullException("Категория_земель");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Категория_земель));
            }
            if ((Кадастровый_номер == null)) {
                throw new global::System.ArgumentNullException("Кадастровый_номер");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Кадастровый_номер));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((bool)(Электроснабжение));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Высота_проводов_над_уровнем_земли));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Расстояние_до_опоры));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Протяжённость_отводной_линии));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((bool)(Газоснабжение));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(Расстояние_от_подземного_газопровода_до_фундамента));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Расстояние_до_газовой_магистрали));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((bool)(Водоснабжение));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(Расстояние_до_фундамента_дома));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(Расстояние_от_ограждений));
            this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(Расстояние_от_ствола_дерева));
            this.Adapter.UpdateCommand.Parameters[17].Value = ((int)(Расстояние_от_других_инженерных_сетей));
            this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(Расстояние_водопроводных_колодцев_от_фундамента_дома));
            if ((Тип_канализации == null)) {
                throw new global::System.ArgumentNullException("Тип_канализации");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Тип_канализации));
            }
            this.Adapter.UpdateCommand.Parameters[20].Value = ((int)(Диаметры_труб));
            this.Adapter.UpdateCommand.Parameters[21].Value = ((int)(Минимальная_глубина_заложения_лотка_трубопровода));
            if ((Смотровые_колодцы == null)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Смотровые_колодцы));
            }
            if ((Расстояние_до_дороги.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((int)(Расстояние_до_дороги.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((Расстояние_от_источника_питьевой_воды.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((int)(Расстояние_от_источника_питьевой_воды.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((Расстояние_от_деревьев.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((int)(Расстояние_от_деревьев.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[26].Value = ((int)(Original_id));
            this.Adapter.UpdateCommand.Parameters[27].Value = ((decimal)(Original_Стоимость_участка));
            this.Adapter.UpdateCommand.Parameters[28].Value = ((int)(Original_Номер_участка));
            this.Adapter.UpdateCommand.Parameters[29].Value = ((int)(Original_Уточнённая_площадь));
            if ((Original_Категория_земель == null)) {
                throw new global::System.ArgumentNullException("Original_Категория_земель");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((string)(Original_Категория_земель));
            }
            if ((Original_Кадастровый_номер == null)) {
                throw new global::System.ArgumentNullException("Original_Кадастровый_номер");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((string)(Original_Кадастровый_номер));
            }
            this.Adapter.UpdateCommand.Parameters[32].Value = ((bool)(Original_Электроснабжение));
            this.Adapter.UpdateCommand.Parameters[33].Value = ((int)(Original_Высота_проводов_над_уровнем_земли));
            this.Adapter.UpdateCommand.Parameters[34].Value = ((int)(Original_Расстояние_до_опоры));
            this.Adapter.UpdateCommand.Parameters[35].Value = ((int)(Original_Протяжённость_отводной_линии));
            this.Adapter.UpdateCommand.Parameters[36].Value = ((bool)(Original_Газоснабжение));
            this.Adapter.UpdateCommand.Parameters[37].Value = ((int)(Original_Расстояние_от_подземного_газопровода_до_фундамента));
            this.Adapter.UpdateCommand.Parameters[38].Value = ((int)(Original_Расстояние_до_газовой_магистрали));
            this.Adapter.UpdateCommand.Parameters[39].Value = ((bool)(Original_Водоснабжение));
            this.Adapter.UpdateCommand.Parameters[40].Value = ((int)(Original_Расстояние_до_фундамента_дома));
            this.Adapter.UpdateCommand.Parameters[41].Value = ((int)(Original_Расстояние_от_ограждений));
            this.Adapter.UpdateCommand.Parameters[42].Value = ((int)(Original_Расстояние_от_ствола_дерева));
            this.Adapter.UpdateCommand.Parameters[43].Value = ((int)(Original_Расстояние_от_других_инженерных_сетей));
            this.Adapter.UpdateCommand.Parameters[44].Value = ((int)(Original_Расстояние_водопроводных_колодцев_от_фундамента_дома));
            if ((Original_Тип_канализации == null)) {
                throw new global::System.ArgumentNullException("Original_Тип_канализации");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((string)(Original_Тип_канализации));
            }
            this.Adapter.UpdateCommand.Parameters[46].Value = ((int)(Original_Диаметры_труб));
            this.Adapter.UpdateCommand.Parameters[47].Value = ((int)(Original_Минимальная_глубина_заложения_лотка_трубопровода));
            if ((Original_Смотровые_колодцы == null)) {
                this.Adapter.UpdateCommand.Parameters[48].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[49].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[48].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[49].Value = ((string)(Original_Смотровые_колодцы));
            }
            if ((Original_Расстояние_до_дороги.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[50].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[51].Value = ((int)(Original_Расстояние_до_дороги.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[50].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[51].Value = global::System.DBNull.Value;
            }
            if ((Original_Расстояние_от_источника_питьевой_воды.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[52].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[53].Value = ((int)(Original_Расстояние_от_источника_питьевой_воды.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[52].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[53].Value = global::System.DBNull.Value;
            }
            if ((Original_Расстояние_от_деревьев.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[54].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[55].Value = ((int)(Original_Расстояние_от_деревьев.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[54].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[55].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    decimal Стоимость_участка, 
                    int Номер_участка, 
                    int Уточнённая_площадь, 
                    string Категория_земель, 
                    string Кадастровый_номер, 
                    bool Электроснабжение, 
                    int Высота_проводов_над_уровнем_земли, 
                    int Расстояние_до_опоры, 
                    int Протяжённость_отводной_линии, 
                    bool Газоснабжение, 
                    int Расстояние_от_подземного_газопровода_до_фундамента, 
                    int Расстояние_до_газовой_магистрали, 
                    bool Водоснабжение, 
                    int Расстояние_до_фундамента_дома, 
                    int Расстояние_от_ограждений, 
                    int Расстояние_от_ствола_дерева, 
                    int Расстояние_от_других_инженерных_сетей, 
                    int Расстояние_водопроводных_колодцев_от_фундамента_дома, 
                    string Тип_канализации, 
                    int Диаметры_труб, 
                    int Минимальная_глубина_заложения_лотка_трубопровода, 
                    string Смотровые_колодцы, 
                    global::System.Nullable<int> Расстояние_до_дороги, 
                    global::System.Nullable<int> Расстояние_от_источника_питьевой_воды, 
                    global::System.Nullable<int> Расстояние_от_деревьев, 
                    int Original_id, 
                    decimal Original_Стоимость_участка, 
                    int Original_Номер_участка, 
                    int Original_Уточнённая_площадь, 
                    string Original_Категория_земель, 
                    string Original_Кадастровый_номер, 
                    bool Original_Электроснабжение, 
                    int Original_Высота_проводов_над_уровнем_земли, 
                    int Original_Расстояние_до_опоры, 
                    int Original_Протяжённость_отводной_линии, 
                    bool Original_Газоснабжение, 
                    int Original_Расстояние_от_подземного_газопровода_до_фундамента, 
                    int Original_Расстояние_до_газовой_магистрали, 
                    bool Original_Водоснабжение, 
                    int Original_Расстояние_до_фундамента_дома, 
                    int Original_Расстояние_от_ограждений, 
                    int Original_Расстояние_от_ствола_дерева, 
                    int Original_Расстояние_от_других_инженерных_сетей, 
                    int Original_Расстояние_водопроводных_колодцев_от_фундамента_дома, 
                    string Original_Тип_канализации, 
                    int Original_Диаметры_труб, 
                    int Original_Минимальная_глубина_заложения_лотка_трубопровода, 
                    string Original_Смотровые_колодцы, 
                    global::System.Nullable<int> Original_Расстояние_до_дороги, 
                    global::System.Nullable<int> Original_Расстояние_от_источника_питьевой_воды, 
                    global::System.Nullable<int> Original_Расстояние_от_деревьев) {
            return this.Update(Original_id, Стоимость_участка, Номер_участка, Уточнённая_площадь, Категория_земель, Кадастровый_номер, Электроснабжение, Высота_проводов_над_уровнем_земли, Расстояние_до_опоры, Протяжённость_отводной_линии, Газоснабжение, Расстояние_от_подземного_газопровода_до_фундамента, Расстояние_до_газовой_магистрали, Водоснабжение, Расстояние_до_фундамента_дома, Расстояние_от_ограждений, Расстояние_от_ствола_дерева, Расстояние_от_других_инженерных_сетей, Расстояние_водопроводных_колодцев_от_фундамента_дома, Тип_канализации, Диаметры_труб, Минимальная_глубина_заложения_лотка_трубопровода, Смотровые_колодцы, Расстояние_до_дороги, Расстояние_от_источника_питьевой_воды, Расстояние_от_деревьев, Original_id, Original_Стоимость_участка, Original_Номер_участка, Original_Уточнённая_площадь, Original_Категория_земель, Original_Кадастровый_номер, Original_Электроснабжение, Original_Высота_проводов_над_уровнем_земли, Original_Расстояние_до_опоры, Original_Протяжённость_отводной_линии, Original_Газоснабжение, Original_Расстояние_от_подземного_газопровода_до_фундамента, Original_Расстояние_до_газовой_магистрали, Original_Водоснабжение, Original_Расстояние_до_фундамента_дома, Original_Расстояние_от_ограждений, Original_Расстояние_от_ствола_дерева, Original_Расстояние_от_других_инженерных_сетей, Original_Расстояние_водопроводных_колодцев_от_фундамента_дома, Original_Тип_канализации, Original_Диаметры_труб, Original_Минимальная_глубина_заложения_лотка_трубопровода, Original_Смотровые_колодцы, Original_Расстояние_до_дороги, Original_Расстояние_от_источника_питьевой_воды, Original_Расстояние_от_деревьев);
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private ДомTableAdapter _домTableAdapter;
        
        private Населённый_пунктTableAdapter _населённый_пунктTableAdapter;
        
        private ПользовательTableAdapter _пользовательTableAdapter;
        
        private Проекты_домовTableAdapter _проекты_домовTableAdapter;
        
        private Стоимость_постройки_домаTableAdapter _стоимость_постройки_домаTableAdapter;
        
        private УчастокTableAdapter _участокTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ДомTableAdapter ДомTableAdapter {
            get {
                return this._домTableAdapter;
            }
            set {
                this._домTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public Населённый_пунктTableAdapter Населённый_пунктTableAdapter {
            get {
                return this._населённый_пунктTableAdapter;
            }
            set {
                this._населённый_пунктTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ПользовательTableAdapter ПользовательTableAdapter {
            get {
                return this._пользовательTableAdapter;
            }
            set {
                this._пользовательTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public Проекты_домовTableAdapter Проекты_домовTableAdapter {
            get {
                return this._проекты_домовTableAdapter;
            }
            set {
                this._проекты_домовTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public Стоимость_постройки_домаTableAdapter Стоимость_постройки_домаTableAdapter {
            get {
                return this._стоимость_постройки_домаTableAdapter;
            }
            set {
                this._стоимость_постройки_домаTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public УчастокTableAdapter УчастокTableAdapter {
            get {
                return this._участокTableAdapter;
            }
            set {
                this._участокTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._домTableAdapter != null) 
                            && (this._домTableAdapter.Connection != null))) {
                    return this._домTableAdapter.Connection;
                }
                if (((this._населённый_пунктTableAdapter != null) 
                            && (this._населённый_пунктTableAdapter.Connection != null))) {
                    return this._населённый_пунктTableAdapter.Connection;
                }
                if (((this._пользовательTableAdapter != null) 
                            && (this._пользовательTableAdapter.Connection != null))) {
                    return this._пользовательTableAdapter.Connection;
                }
                if (((this._проекты_домовTableAdapter != null) 
                            && (this._проекты_домовTableAdapter.Connection != null))) {
                    return this._проекты_домовTableAdapter.Connection;
                }
                if (((this._стоимость_постройки_домаTableAdapter != null) 
                            && (this._стоимость_постройки_домаTableAdapter.Connection != null))) {
                    return this._стоимость_постройки_домаTableAdapter.Connection;
                }
                if (((this._участокTableAdapter != null) 
                            && (this._участокTableAdapter.Connection != null))) {
                    return this._участокTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._домTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._населённый_пунктTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._пользовательTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._проекты_домовTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._стоимость_постройки_домаTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._участокTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private int UpdateUpdatedRows(DiplommDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._пользовательTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Пользователь.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._пользовательTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._стоимость_постройки_домаTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Стоимость_постройки_дома.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._стоимость_постройки_домаTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._домTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Дом.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._домTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._населённый_пунктTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Населённый_пункт.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._населённый_пунктTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._проекты_домовTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Проекты_домов.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._проекты_домовTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._участокTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Участок.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._участокTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private int UpdateInsertedRows(DiplommDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._пользовательTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Пользователь.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._пользовательTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._стоимость_постройки_домаTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Стоимость_постройки_дома.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._стоимость_постройки_домаTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._домTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Дом.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._домTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._населённый_пунктTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Населённый_пункт.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._населённый_пунктTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._проекты_домовTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Проекты_домов.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._проекты_домовTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._участокTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Участок.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._участокTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private int UpdateDeletedRows(DiplommDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._участокTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Участок.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._участокTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._проекты_домовTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Проекты_домов.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._проекты_домовTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._населённый_пунктTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Населённый_пункт.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._населённый_пунктTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._домTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Дом.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._домTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._стоимость_постройки_домаTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Стоимость_постройки_дома.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._стоимость_постройки_домаTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._пользовательTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Пользователь.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._пользовательTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public virtual int UpdateAll(DiplommDataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._домTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._домTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage" +
                        "r, должны использовать одинаковую строку подключения.");
            }
            if (((this._населённый_пунктTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._населённый_пунктTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage" +
                        "r, должны использовать одинаковую строку подключения.");
            }
            if (((this._пользовательTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._пользовательTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage" +
                        "r, должны использовать одинаковую строку подключения.");
            }
            if (((this._проекты_домовTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._проекты_домовTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage" +
                        "r, должны использовать одинаковую строку подключения.");
            }
            if (((this._стоимость_постройки_домаTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._стоимость_постройки_домаTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage" +
                        "r, должны использовать одинаковую строку подключения.");
            }
            if (((this._участокTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._участокTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage" +
                        "r, должны использовать одинаковую строку подключения.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager не содержит сведений о подключении. Укажите для каждого адапт" +
                        "ера таблицы TableAdapterManager допустимый экземпляр адаптера таблицы.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("Не удается начать транзакцию. Текущее соединение данных не поддерживает транзакци" +
                        "и или текущее состояние не позволяет начать транзакцию.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._домTableAdapter != null)) {
                    revertConnections.Add(this._домTableAdapter, this._домTableAdapter.Connection);
                    this._домTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._домTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._домTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._домTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._домTableAdapter.Adapter);
                    }
                }
                if ((this._населённый_пунктTableAdapter != null)) {
                    revertConnections.Add(this._населённый_пунктTableAdapter, this._населённый_пунктTableAdapter.Connection);
                    this._населённый_пунктTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._населённый_пунктTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._населённый_пунктTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._населённый_пунктTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._населённый_пунктTableAdapter.Adapter);
                    }
                }
                if ((this._пользовательTableAdapter != null)) {
                    revertConnections.Add(this._пользовательTableAdapter, this._пользовательTableAdapter.Connection);
                    this._пользовательTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._пользовательTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._пользовательTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._пользовательTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._пользовательTableAdapter.Adapter);
                    }
                }
                if ((this._проекты_домовTableAdapter != null)) {
                    revertConnections.Add(this._проекты_домовTableAdapter, this._проекты_домовTableAdapter.Connection);
                    this._проекты_домовTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._проекты_домовTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._проекты_домовTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._проекты_домовTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._проекты_домовTableAdapter.Adapter);
                    }
                }
                if ((this._стоимость_постройки_домаTableAdapter != null)) {
                    revertConnections.Add(this._стоимость_постройки_домаTableAdapter, this._стоимость_постройки_домаTableAdapter.Connection);
                    this._стоимость_постройки_домаTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._стоимость_постройки_домаTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._стоимость_постройки_домаTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._стоимость_постройки_домаTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._стоимость_постройки_домаTableAdapter.Adapter);
                    }
                }
                if ((this._участокTableAdapter != null)) {
                    revertConnections.Add(this._участокTableAdapter, this._участокTableAdapter.Connection);
                    this._участокTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._участокTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._участокTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._участокTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._участокTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._домTableAdapter != null)) {
                    this._домTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._домTableAdapter]));
                    this._домTableAdapter.Transaction = null;
                }
                if ((this._населённый_пунктTableAdapter != null)) {
                    this._населённый_пунктTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._населённый_пунктTableAdapter]));
                    this._населённый_пунктTableAdapter.Transaction = null;
                }
                if ((this._пользовательTableAdapter != null)) {
                    this._пользовательTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._пользовательTableAdapter]));
                    this._пользовательTableAdapter.Transaction = null;
                }
                if ((this._проекты_домовTableAdapter != null)) {
                    this._проекты_домовTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._проекты_домовTableAdapter]));
                    this._проекты_домовTableAdapter.Transaction = null;
                }
                if ((this._стоимость_постройки_домаTableAdapter != null)) {
                    this._стоимость_постройки_домаTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._стоимость_постройки_домаTableAdapter]));
                    this._стоимость_постройки_домаTableAdapter.Transaction = null;
                }
                if ((this._участокTableAdapter != null)) {
                    this._участокTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._участокTableAdapter]));
                    this._участокTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private global::System.Data.DataRow GetRoot(global::System.Data.DataRow row, out int distance) {
                global::System.Diagnostics.Debug.Assert((row != null));
                global::System.Data.DataRow root = row;
                distance = 0;

                global::System.Collections.Generic.IDictionary<global::System.Data.DataRow, global::System.Data.DataRow> traversedRows = new global::System.Collections.Generic.Dictionary<global::System.Data.DataRow, global::System.Data.DataRow>();
                traversedRows[row] = row;

                global::System.Data.DataRow parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((parent != null) 
                            && (traversedRows.ContainsKey(parent) == false)); 
                ) {
                    distance = (distance + 1);
                    root = parent;
                    traversedRows[parent] = parent;
                    parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }

                if ((distance == 0)) {
                    traversedRows.Clear();
                    traversedRows[row] = row;
                    parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    for (
                    ; ((parent != null) 
                                && (traversedRows.ContainsKey(parent) == false)); 
                    ) {
                        distance = (distance + 1);
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }

                return root;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                int distance1 = 0;
                global::System.Data.DataRow root1 = this.GetRoot(row1, out distance1);

                int distance2 = 0;
                global::System.Data.DataRow root2 = this.GetRoot(row2, out distance2);

                if (object.ReferenceEquals(root1, root2)) {
                    return (this._childFirst * distance1.CompareTo(distance2));
                }
                else {
                    global::System.Diagnostics.Debug.Assert(((root1.Table != null) 
                                    && (root2.Table != null)));
                    if ((root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
            }
        }
    }
}

#pragma warning restore 1591